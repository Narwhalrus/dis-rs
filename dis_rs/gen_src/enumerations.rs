pub mod enumerations {
    use std::fmt::{Display, Formatter};

    #[derive(Copy, Clone, Debug, PartialEq)]
    #[allow(non_camel_case_types)]
    pub enum ForceID { Other, Friendly, Opposing, Neutral, Friendly2, Opposing2, Neutral2, Friendly3, Opposing3, Neutral3, Friendly4, Opposing4, Neutral4, Friendly5, Opposing5, Neutral5, Friendly6, Opposing6, Neutral6, Friendly7, Opposing7, Neutral7, Friendly8, Opposing8, Neutral8, Friendly9, Opposing9, Neutral9, Friendly10, Opposing10, Neutral10, Unspecified(u8) }

    impl From<u8> for ForceID {
        fn from(value: u8) -> Self {
            match value {
                0u8 => ForceID::Other,
                1u8 => ForceID::Friendly,
                2u8 => ForceID::Opposing,
                3u8 => ForceID::Neutral,
                4u8 => ForceID::Friendly2,
                5u8 => ForceID::Opposing2,
                6u8 => ForceID::Neutral2,
                7u8 => ForceID::Friendly3,
                8u8 => ForceID::Opposing3,
                9u8 => ForceID::Neutral3,
                10u8 => ForceID::Friendly4,
                11u8 => ForceID::Opposing4,
                12u8 => ForceID::Neutral4,
                13u8 => ForceID::Friendly5,
                14u8 => ForceID::Opposing5,
                15u8 => ForceID::Neutral5,
                16u8 => ForceID::Friendly6,
                17u8 => ForceID::Opposing6,
                18u8 => ForceID::Neutral6,
                19u8 => ForceID::Friendly7,
                20u8 => ForceID::Opposing7,
                21u8 => ForceID::Neutral7,
                22u8 => ForceID::Friendly8,
                23u8 => ForceID::Opposing8,
                24u8 => ForceID::Neutral8,
                25u8 => ForceID::Friendly9,
                26u8 => ForceID::Opposing9,
                27u8 => ForceID::Neutral9,
                28u8 => ForceID::Friendly10,
                29u8 => ForceID::Opposing10,
                30u8 => ForceID::Neutral10,
                unspecified_value => ForceID::Unspecified(unspecified_value)
            }
        }
    }

    impl From<ForceID> for u8 {
        fn from(value: ForceID) -> Self {
            match value {
                ForceID::Other => 0u8,
                ForceID::Friendly => 1u8,
                ForceID::Opposing => 2u8,
                ForceID::Neutral => 3u8,
                ForceID::Friendly2 => 4u8,
                ForceID::Opposing2 => 5u8,
                ForceID::Neutral2 => 6u8,
                ForceID::Friendly3 => 7u8,
                ForceID::Opposing3 => 8u8,
                ForceID::Neutral3 => 9u8,
                ForceID::Friendly4 => 10u8,
                ForceID::Opposing4 => 11u8,
                ForceID::Neutral4 => 12u8,
                ForceID::Friendly5 => 13u8,
                ForceID::Opposing5 => 14u8,
                ForceID::Neutral5 => 15u8,
                ForceID::Friendly6 => 16u8,
                ForceID::Opposing6 => 17u8,
                ForceID::Neutral6 => 18u8,
                ForceID::Friendly7 => 19u8,
                ForceID::Opposing7 => 20u8,
                ForceID::Neutral7 => 21u8,
                ForceID::Friendly8 => 22u8,
                ForceID::Opposing8 => 23u8,
                ForceID::Neutral8 => 24u8,
                ForceID::Friendly9 => 25u8,
                ForceID::Opposing9 => 26u8,
                ForceID::Neutral9 => 27u8,
                ForceID::Friendly10 => 28u8,
                ForceID::Opposing10 => 29u8,
                ForceID::Neutral10 => 30u8,
                ForceID::Unspecified(unspecified_value) => unspecified_value
            }
        }
    }

    impl Display for ForceID {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            match self {
                ForceID::Other => write!(f, "{}", "Other"),
                ForceID::Friendly => write!(f, "{}", "Friendly"),
                ForceID::Opposing => write!(f, "{}", "Opposing"),
                ForceID::Neutral => write!(f, "{}", "Neutral"),
                ForceID::Friendly2 => write!(f, "{}", "Friendly 2"),
                ForceID::Opposing2 => write!(f, "{}", "Opposing 2"),
                ForceID::Neutral2 => write!(f, "{}", "Neutral 2"),
                ForceID::Friendly3 => write!(f, "{}", "Friendly 3"),
                ForceID::Opposing3 => write!(f, "{}", "Opposing 3"),
                ForceID::Neutral3 => write!(f, "{}", "Neutral 3"),
                ForceID::Friendly4 => write!(f, "{}", "Friendly 4"),
                ForceID::Opposing4 => write!(f, "{}", "Opposing 4"),
                ForceID::Neutral4 => write!(f, "{}", "Neutral 4"),
                ForceID::Friendly5 => write!(f, "{}", "Friendly 5"),
                ForceID::Opposing5 => write!(f, "{}", "Opposing 5"),
                ForceID::Neutral5 => write!(f, "{}", "Neutral 5"),
                ForceID::Friendly6 => write!(f, "{}", "Friendly 6"),
                ForceID::Opposing6 => write!(f, "{}", "Opposing 6"),
                ForceID::Neutral6 => write!(f, "{}", "Neutral 6"),
                ForceID::Friendly7 => write!(f, "{}", "Friendly 7"),
                ForceID::Opposing7 => write!(f, "{}", "Opposing 7"),
                ForceID::Neutral7 => write!(f, "{}", "Neutral 7"),
                ForceID::Friendly8 => write!(f, "{}", "Friendly 8"),
                ForceID::Opposing8 => write!(f, "{}", "Opposing 8"),
                ForceID::Neutral8 => write!(f, "{}", "Neutral 8"),
                ForceID::Friendly9 => write!(f, "{}", "Friendly 9"),
                ForceID::Opposing9 => write!(f, "{}", "Opposing 9"),
                ForceID::Neutral9 => write!(f, "{}", "Neutral 9"),
                ForceID::Friendly10 => write!(f, "{}", "Friendly 10"),
                ForceID::Opposing10 => write!(f, "{}", "Opposing 10"),
                ForceID::Neutral10 => write!(f, "{}", "Neutral 10"),
                ForceID::Unspecified(unspecified_value) => write!(f, "Unspecified ({})", unspecified_value)
            }
        }
    }

    impl Default for ForceID { fn default() -> Self { ForceID::from(0) } }

    #[derive(Copy, Clone, Debug, PartialEq)]
    #[allow(non_camel_case_types)]
    pub enum EntityKind { Other, Platform, Munition, Lifeform, Environmental, Culturalfeature, Supply, Radio, Expendable, SensorEmitter, Unspecified(u8) }

    impl From<u8> for EntityKind {
        fn from(value: u8) -> Self {
            match value {
                0u8 => EntityKind::Other,
                1u8 => EntityKind::Platform,
                2u8 => EntityKind::Munition,
                3u8 => EntityKind::Lifeform,
                4u8 => EntityKind::Environmental,
                5u8 => EntityKind::Culturalfeature,
                6u8 => EntityKind::Supply,
                7u8 => EntityKind::Radio,
                8u8 => EntityKind::Expendable,
                9u8 => EntityKind::SensorEmitter,
                unspecified_value => EntityKind::Unspecified(unspecified_value)
            }
        }
    }

    impl From<EntityKind> for u8 {
        fn from(value: EntityKind) -> Self {
            match value {
                EntityKind::Other => 0u8,
                EntityKind::Platform => 1u8,
                EntityKind::Munition => 2u8,
                EntityKind::Lifeform => 3u8,
                EntityKind::Environmental => 4u8,
                EntityKind::Culturalfeature => 5u8,
                EntityKind::Supply => 6u8,
                EntityKind::Radio => 7u8,
                EntityKind::Expendable => 8u8,
                EntityKind::SensorEmitter => 9u8,
                EntityKind::Unspecified(unspecified_value) => unspecified_value
            }
        }
    }

    impl Display for EntityKind {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            match self {
                EntityKind::Other => write!(f, "{}", "Other"),
                EntityKind::Platform => write!(f, "{}", "Platform"),
                EntityKind::Munition => write!(f, "{}", "Munition"),
                EntityKind::Lifeform => write!(f, "{}", "Life form"),
                EntityKind::Environmental => write!(f, "{}", "Environmental"),
                EntityKind::Culturalfeature => write!(f, "{}", "Cultural feature"),
                EntityKind::Supply => write!(f, "{}", "Supply"),
                EntityKind::Radio => write!(f, "{}", "Radio"),
                EntityKind::Expendable => write!(f, "{}", "Expendable"),
                EntityKind::SensorEmitter => write!(f, "{}", "Sensor/Emitter"),
                EntityKind::Unspecified(unspecified_value) => write!(f, "Unspecified ({})", unspecified_value)
            }
        }
    }

    impl Default for EntityKind { fn default() -> Self { EntityKind::from(0) } }

    #[derive(Copy, Clone, Debug, PartialEq)]
    #[allow(non_camel_case_types)]
    pub enum Country {
        Other,
        Afghanistan_AFG_,
        Albania_ALB_,
        Algeria_DZA_,
        AmericanSamoa_ASM_,
        Andorra_AND_,
        Angola_AGO_,
        Anguilla_AIA_,
        Antarctica_ATA_,
        AntiguaandBarbuda_ATG_,
        Argentina_ARG_,
        Aruba_ABW_,
        AshmoreandCartierIslands_Australia_,
        Australia_AUS_,
        Austria_AUT_,
        Bahamas_BHS_,
        Bahrain_BHR_,
        BakerIsland_UnitedStates_,
        Bangladesh_BGD_,
        Barbados_BRB_,
        BassasdaIndia_France_,
        Belgium_BEL_,
        Belize_BLZ_,
        Benin_BEN_,
        Bermuda_BMU_,
        Bhutan_BTN_,
        Bolivia_PlurinationalStateof__BOL_,
        Botswana_BWA_,
        BouvetIsland_BVT_,
        Brazil_BRA_,
        BritishIndianOceanTerritory_IOT_,
        VirginIslands_British__VGB_,
        BruneiDarussalam_BRN_,
        Bulgaria_BGR_,
        BurkinaFaso_BFA_,
        Myanmar_MMR_,
        Burundi_BDI_,
        Cambodia_KHM_,
        Cameroon_CMR_,
        Canada_CAN_,
        CaboVerde_CPV_,
        CaymanIslands_CYM_,
        CentralAfricanRepublic_CAF_,
        Chad_TCD_,
        Chile_CHL_,
        China_PeoplesRepublicof_CHN_,
        ChristmasIsland_CXR_,
        Cocos_Keeling_Islands_CCK_,
        Colombia_COL_,
        Comoros_COM_,
        Congo_COG_,
        CookIslands_COK_,
        CoralSeaIslands_Australia_,
        CostaRica_CRI_,
        Cuba_CUB_,
        Cyprus_CYP_,
        Czechoslovakia_CSK_,
        Denmark_DNK_,
        Djibouti_DJI_,
        Dominica_DMA_,
        DominicanRepublic_DOM_,
        Ecuador_ECU_,
        Egypt_EGY_,
        ElSalvador_SLV_,
        EquatorialGuinea_GNQ_,
        Ethiopia_ETH_,
        EuropaIsland_France_,
        FalklandIslands_Malvinas__FLK_,
        FaroeIslands_FRO_,
        Fiji_FJI_,
        Finland_FIN_,
        France_FRA_,
        FrenchGuiana_GUF_,
        FrenchPolynesia_PYF_,
        FrenchSouthernTerritories_ATF_,
        Gabon_GAB_,
        Gambia_The_GMB_,
        GazaStrip_Israel_,
        Germany_DEU_,
        Ghana_GHA_,
        Gibraltar_GIB_,
        GloriosoIslands_France_,
        Greece_GRC_,
        Greenland_GRL_,
        Grenada_GRD_,
        Guadeloupe_GLP_,
        Guam_GUM_,
        Guatemala_GTM_,
        Guernsey_GGY_,
        Guinea_GIN_,
        GuineaBissau_GNB_,
        Guyana_GUY_,
        Haiti_HTI_,
        HeardIslandandMcDonaldIslands_HMD_,
        Honduras_HND_,
        HongKong_HKG_,
        HowlandIsland_UnitedStates_,
        Hungary_HUN_,
        Iceland_ISL_,
        India_IND_,
        Indonesia_IDN_,
        Iran_IslamicRepublicof__IRN_,
        Iraq_IRQ_,
        Ireland_IRL_,
        Israel_ISR_,
        Italy_ITA_,
        CotedIvoire_CIV_,
        Jamaica_JAM_,
        JanMayen_Norway_,
        Japan_JPN_,
        JarvisIsland_UnitedStates_,
        Jersey_JEY_,
        JohnstonAtoll_UnitedStates_,
        Jordan_JOR_,
        JuandeNovaIsland,
        Kenya_KEN_,
        KingmanReef_UnitedStates_,
        Kiribati_KIR_,
        Korea_DemocraticPeoplesRepublicof__PRK_,
        Korea_Republicof__KOR_,
        Kuwait_KWT_,
        LaoPeoplesDemocraticRepublic_LAO_,
        Lebanon_LBN_,
        Lesotho_LSO_,
        Liberia_LBR_,
        Libya_LBY_,
        Liechtenstein_LIE_,
        Luxembourg_LUX_,
        Madagascar_MDG_,
        Macao_MAC_,
        Malawi_MWI_,
        Malaysia_MYS_,
        Maldives_MDV_,
        Mali_MLI_,
        Malta_MLT_,
        IsleofMan_IMN_,
        MarshallIslands_MHL_,
        Martinique_MTQ_,
        Mauritania_MRT_,
        Mauritius_MUS_,
        Mayotte_MYT_,
        Mexico_MEX_,
        Micronesia_FederatedStatesof__FSM_,
        Monaco_MCO_,
        Mongolia_MNG_,
        Montserrat_MSR_,
        Morocco_MAR_,
        Mozambique_MOZ_,
        Namibia_NAM_,
        Nauru_NRU_,
        NavassaIsland_UnitedStates_,
        Nepal_NPL_,
        Netherlands_NLD_,
        NetherlandsAntilles_Curacao_Bonaire_Saba_SintMaartenSintEustatius_,
        NewCaledonia_NCL_,
        NewZealand_NZL_,
        Nicaragua_NIC_,
        Niger_NER_,
        Nigeria_NGA_,
        Niue_NIU_,
        NorfolkIsland_NFK_,
        NorthernMarianaIslands_MNP_,
        Norway_NOR_,
        Oman_OMN_,
        Pakistan_PAK_,
        PalmyraAtoll_UnitedStates_,
        Panama_PAN_,
        PapuaNewGuinea_PNG_,
        ParacelIslands_InternationalOccupiedbyChina_alsoclaimedbyTaiwanandVietnam_,
        Paraguay_PRY_,
        Peru_PER_,
        Philippines_PHL_,
        Pitcairn_PCN_,
        Poland_POL_,
        Portugal_PRT_,
        PuertoRico_PRI_,
        Qatar_QAT_,
        Reunion_REU_,
        Romania_ROU_,
        Rwanda_RWA_,
        SaintKittsandNevis_KNA_,
        SaintHelena_AscensionandTristandaCunha_SHN_,
        SaintLucia_LCA_,
        SaintPierreandMiquelon_SPM_,
        SaintVincentandtheGrenadines_VCT_,
        SanMarino_SMR_,
        SaoTomeandPrincipe_STP_,
        SaudiArabia_SAU_,
        Senegal_SEN_,
        Seychelles_SYC_,
        SierraLeone_SLE_,
        Singapore_SGP_,
        SolomonIslands_SLB_,
        Somalia_SOM_,
        SouthGeorgiaandtheSouthSandwichIslands_SGS_,
        SouthAfrica_ZAF_,
        Spain_ESP_,
        SpratlyIslands_InternationalpartsoccupiedandclaimedbyChina_Malaysia_Philippines_Taiwan_Vietnam_,
        SriLanka_LKA_,
        Sudan_SDN_,
        Suriname_SUR_,
        Svalbard_Norway_,
        Eswatini_SWZ_,
        Sweden_SWE_,
        Switzerland_CHE_,
        SyrianArabRepublic_SYR_,
        Taiwan_ProvinceofChina_TWN_,
        Tanzania_UnitedRepublicof_TZA_,
        Thailand_THA_,
        Togo_TGO_,
        Tokelau_TKL_,
        Tonga_TON_,
        TrinidadandTobago_TTO_,
        TromelinIsland_France_,
        Palau_PLW_,
        Tunisia_TUN_,
        Turkey_TUR_,
        TurksandCaicosIslands_TCA_,
        Tuvalu_TUV_,
        Uganda_UGA_,
        Russia_RUS_,
        UnitedArabEmirates_ARE_,
        UnitedKingdomofGreatBritainandNorthernIreland_GBR_,
        UnitedStatesofAmerica_USA_,
        Uruguay_URY_,
        Vanuatu_VUT_,
        HolySee_VAT_,
        Venezuela_BolivarianRepublicof__VEN_,
        VietNam_VNM_,
        VirginIslands_U_S___VIR_,
        WakeIsland_UnitedStates_,
        WallisandFutuna_WLF_,
        WesternSahara_ESH_,
        WestBank_Israel_,
        Samoa_WSM_,
        Yemen_YEM_,
        SerbiaandMontenegro,
        Zaire,
        Zambia_ZMB_,
        Zimbabwe_ZWE_,
        Armenia_ARM_,
        Azerbaijan_AZE_,
        Belarus_BLR_,
        BosniaandHerzegovina_BIH_,
        ClippertonIsland_France_,
        Croatia_HRV_,
        Estonia_EST_,
        Georgia_GEO_,
        Kazakhstan_KAZ_,
        Kyrgyzstan_KGZ_,
        Latvia_LVA_,
        Lithuania_LTU_,
        NorthMacedonia_MKD_,
        MidwayIslands_UnitedStates_,
        Moldova_Republicof__MDA_,
        Montenegro_MNE_,
        Russia,
        SerbiaandMontenegro_Montenegrotoseparate_,
        Slovenia_SVN_,
        Tajikistan_TJK_,
        Turkmenistan_TKM_,
        Ukraine_UKR_,
        Uzbekistan_UZB_,
        CzechRepublic_CZE_,
        Slovakia_SVK_,
        AalandIslands_ALA_,
        Bonaire_SintEustatiusandSaba_BES_,
        Congo_DemocraticRepublicofthe__COD_,
        Curacao_CUW_,
        Eritrea_ERI_,
        SaintBarthelemy_BLM_,
        SaintMartin_FrenchPart__MAF_,
        Serbia_SRB_,
        SintMaarten_Dutchpart__SXM_,
        SouthSudan_SSD_,
        SvalbardandJanMayen_SJM_,
        TimorLeste_TLS_,
        UnitedStatesMinorOutlyingIslands_UMI_,
        Palestine_Stateof_PSE_,
        Unspecified(u16),
    }

    impl From<u16> for Country {
        fn from(value: u16) -> Self {
            match value {
                0u16 => Country::Other,
                1u16 => Country::Afghanistan_AFG_,
                2u16 => Country::Albania_ALB_,
                3u16 => Country::Algeria_DZA_,
                4u16 => Country::AmericanSamoa_ASM_,
                5u16 => Country::Andorra_AND_,
                6u16 => Country::Angola_AGO_,
                7u16 => Country::Anguilla_AIA_,
                8u16 => Country::Antarctica_ATA_,
                9u16 => Country::AntiguaandBarbuda_ATG_,
                10u16 => Country::Argentina_ARG_,
                11u16 => Country::Aruba_ABW_,
                12u16 => Country::AshmoreandCartierIslands_Australia_,
                13u16 => Country::Australia_AUS_,
                14u16 => Country::Austria_AUT_,
                15u16 => Country::Bahamas_BHS_,
                16u16 => Country::Bahrain_BHR_,
                17u16 => Country::BakerIsland_UnitedStates_,
                18u16 => Country::Bangladesh_BGD_,
                19u16 => Country::Barbados_BRB_,
                20u16 => Country::BassasdaIndia_France_,
                21u16 => Country::Belgium_BEL_,
                22u16 => Country::Belize_BLZ_,
                23u16 => Country::Benin_BEN_,
                24u16 => Country::Bermuda_BMU_,
                25u16 => Country::Bhutan_BTN_,
                26u16 => Country::Bolivia_PlurinationalStateof__BOL_,
                27u16 => Country::Botswana_BWA_,
                28u16 => Country::BouvetIsland_BVT_,
                29u16 => Country::Brazil_BRA_,
                30u16 => Country::BritishIndianOceanTerritory_IOT_,
                31u16 => Country::VirginIslands_British__VGB_,
                32u16 => Country::BruneiDarussalam_BRN_,
                33u16 => Country::Bulgaria_BGR_,
                34u16 => Country::BurkinaFaso_BFA_,
                35u16 => Country::Myanmar_MMR_,
                36u16 => Country::Burundi_BDI_,
                37u16 => Country::Cambodia_KHM_,
                38u16 => Country::Cameroon_CMR_,
                39u16 => Country::Canada_CAN_,
                40u16 => Country::CaboVerde_CPV_,
                41u16 => Country::CaymanIslands_CYM_,
                42u16 => Country::CentralAfricanRepublic_CAF_,
                43u16 => Country::Chad_TCD_,
                44u16 => Country::Chile_CHL_,
                45u16 => Country::China_PeoplesRepublicof_CHN_,
                46u16 => Country::ChristmasIsland_CXR_,
                47u16 => Country::Cocos_Keeling_Islands_CCK_,
                48u16 => Country::Colombia_COL_,
                49u16 => Country::Comoros_COM_,
                50u16 => Country::Congo_COG_,
                51u16 => Country::CookIslands_COK_,
                52u16 => Country::CoralSeaIslands_Australia_,
                53u16 => Country::CostaRica_CRI_,
                54u16 => Country::Cuba_CUB_,
                55u16 => Country::Cyprus_CYP_,
                56u16 => Country::Czechoslovakia_CSK_,
                57u16 => Country::Denmark_DNK_,
                58u16 => Country::Djibouti_DJI_,
                59u16 => Country::Dominica_DMA_,
                60u16 => Country::DominicanRepublic_DOM_,
                61u16 => Country::Ecuador_ECU_,
                62u16 => Country::Egypt_EGY_,
                63u16 => Country::ElSalvador_SLV_,
                64u16 => Country::EquatorialGuinea_GNQ_,
                65u16 => Country::Ethiopia_ETH_,
                66u16 => Country::EuropaIsland_France_,
                67u16 => Country::FalklandIslands_Malvinas__FLK_,
                68u16 => Country::FaroeIslands_FRO_,
                69u16 => Country::Fiji_FJI_,
                70u16 => Country::Finland_FIN_,
                71u16 => Country::France_FRA_,
                72u16 => Country::FrenchGuiana_GUF_,
                73u16 => Country::FrenchPolynesia_PYF_,
                74u16 => Country::FrenchSouthernTerritories_ATF_,
                75u16 => Country::Gabon_GAB_,
                76u16 => Country::Gambia_The_GMB_,
                77u16 => Country::GazaStrip_Israel_,
                78u16 => Country::Germany_DEU_,
                79u16 => Country::Ghana_GHA_,
                80u16 => Country::Gibraltar_GIB_,
                81u16 => Country::GloriosoIslands_France_,
                82u16 => Country::Greece_GRC_,
                83u16 => Country::Greenland_GRL_,
                84u16 => Country::Grenada_GRD_,
                85u16 => Country::Guadeloupe_GLP_,
                86u16 => Country::Guam_GUM_,
                87u16 => Country::Guatemala_GTM_,
                88u16 => Country::Guernsey_GGY_,
                89u16 => Country::Guinea_GIN_,
                90u16 => Country::GuineaBissau_GNB_,
                91u16 => Country::Guyana_GUY_,
                92u16 => Country::Haiti_HTI_,
                93u16 => Country::HeardIslandandMcDonaldIslands_HMD_,
                94u16 => Country::Honduras_HND_,
                95u16 => Country::HongKong_HKG_,
                96u16 => Country::HowlandIsland_UnitedStates_,
                97u16 => Country::Hungary_HUN_,
                98u16 => Country::Iceland_ISL_,
                99u16 => Country::India_IND_,
                100u16 => Country::Indonesia_IDN_,
                101u16 => Country::Iran_IslamicRepublicof__IRN_,
                102u16 => Country::Iraq_IRQ_,
                104u16 => Country::Ireland_IRL_,
                105u16 => Country::Israel_ISR_,
                106u16 => Country::Italy_ITA_,
                107u16 => Country::CotedIvoire_CIV_,
                108u16 => Country::Jamaica_JAM_,
                109u16 => Country::JanMayen_Norway_,
                110u16 => Country::Japan_JPN_,
                111u16 => Country::JarvisIsland_UnitedStates_,
                112u16 => Country::Jersey_JEY_,
                113u16 => Country::JohnstonAtoll_UnitedStates_,
                114u16 => Country::Jordan_JOR_,
                115u16 => Country::JuandeNovaIsland,
                116u16 => Country::Kenya_KEN_,
                117u16 => Country::KingmanReef_UnitedStates_,
                118u16 => Country::Kiribati_KIR_,
                119u16 => Country::Korea_DemocraticPeoplesRepublicof__PRK_,
                120u16 => Country::Korea_Republicof__KOR_,
                121u16 => Country::Kuwait_KWT_,
                122u16 => Country::LaoPeoplesDemocraticRepublic_LAO_,
                123u16 => Country::Lebanon_LBN_,
                124u16 => Country::Lesotho_LSO_,
                125u16 => Country::Liberia_LBR_,
                126u16 => Country::Libya_LBY_,
                127u16 => Country::Liechtenstein_LIE_,
                128u16 => Country::Luxembourg_LUX_,
                129u16 => Country::Madagascar_MDG_,
                130u16 => Country::Macao_MAC_,
                131u16 => Country::Malawi_MWI_,
                132u16 => Country::Malaysia_MYS_,
                133u16 => Country::Maldives_MDV_,
                134u16 => Country::Mali_MLI_,
                135u16 => Country::Malta_MLT_,
                136u16 => Country::IsleofMan_IMN_,
                137u16 => Country::MarshallIslands_MHL_,
                138u16 => Country::Martinique_MTQ_,
                139u16 => Country::Mauritania_MRT_,
                140u16 => Country::Mauritius_MUS_,
                141u16 => Country::Mayotte_MYT_,
                142u16 => Country::Mexico_MEX_,
                143u16 => Country::Micronesia_FederatedStatesof__FSM_,
                144u16 => Country::Monaco_MCO_,
                145u16 => Country::Mongolia_MNG_,
                146u16 => Country::Montserrat_MSR_,
                147u16 => Country::Morocco_MAR_,
                148u16 => Country::Mozambique_MOZ_,
                149u16 => Country::Namibia_NAM_,
                150u16 => Country::Nauru_NRU_,
                151u16 => Country::NavassaIsland_UnitedStates_,
                152u16 => Country::Nepal_NPL_,
                153u16 => Country::Netherlands_NLD_,
                154u16 => Country::NetherlandsAntilles_Curacao_Bonaire_Saba_SintMaartenSintEustatius_,
                155u16 => Country::NewCaledonia_NCL_,
                156u16 => Country::NewZealand_NZL_,
                157u16 => Country::Nicaragua_NIC_,
                158u16 => Country::Niger_NER_,
                159u16 => Country::Nigeria_NGA_,
                160u16 => Country::Niue_NIU_,
                161u16 => Country::NorfolkIsland_NFK_,
                162u16 => Country::NorthernMarianaIslands_MNP_,
                163u16 => Country::Norway_NOR_,
                164u16 => Country::Oman_OMN_,
                165u16 => Country::Pakistan_PAK_,
                166u16 => Country::PalmyraAtoll_UnitedStates_,
                168u16 => Country::Panama_PAN_,
                169u16 => Country::PapuaNewGuinea_PNG_,
                170u16 => Country::ParacelIslands_InternationalOccupiedbyChina_alsoclaimedbyTaiwanandVietnam_,
                171u16 => Country::Paraguay_PRY_,
                172u16 => Country::Peru_PER_,
                173u16 => Country::Philippines_PHL_,
                174u16 => Country::Pitcairn_PCN_,
                175u16 => Country::Poland_POL_,
                176u16 => Country::Portugal_PRT_,
                177u16 => Country::PuertoRico_PRI_,
                178u16 => Country::Qatar_QAT_,
                179u16 => Country::Reunion_REU_,
                180u16 => Country::Romania_ROU_,
                181u16 => Country::Rwanda_RWA_,
                182u16 => Country::SaintKittsandNevis_KNA_,
                183u16 => Country::SaintHelena_AscensionandTristandaCunha_SHN_,
                184u16 => Country::SaintLucia_LCA_,
                185u16 => Country::SaintPierreandMiquelon_SPM_,
                186u16 => Country::SaintVincentandtheGrenadines_VCT_,
                187u16 => Country::SanMarino_SMR_,
                188u16 => Country::SaoTomeandPrincipe_STP_,
                189u16 => Country::SaudiArabia_SAU_,
                190u16 => Country::Senegal_SEN_,
                191u16 => Country::Seychelles_SYC_,
                192u16 => Country::SierraLeone_SLE_,
                193u16 => Country::Singapore_SGP_,
                194u16 => Country::SolomonIslands_SLB_,
                195u16 => Country::Somalia_SOM_,
                196u16 => Country::SouthGeorgiaandtheSouthSandwichIslands_SGS_,
                197u16 => Country::SouthAfrica_ZAF_,
                198u16 => Country::Spain_ESP_,
                199u16 => Country::SpratlyIslands_InternationalpartsoccupiedandclaimedbyChina_Malaysia_Philippines_Taiwan_Vietnam_,
                200u16 => Country::SriLanka_LKA_,
                201u16 => Country::Sudan_SDN_,
                202u16 => Country::Suriname_SUR_,
                203u16 => Country::Svalbard_Norway_,
                204u16 => Country::Eswatini_SWZ_,
                205u16 => Country::Sweden_SWE_,
                206u16 => Country::Switzerland_CHE_,
                207u16 => Country::SyrianArabRepublic_SYR_,
                208u16 => Country::Taiwan_ProvinceofChina_TWN_,
                209u16 => Country::Tanzania_UnitedRepublicof_TZA_,
                210u16 => Country::Thailand_THA_,
                211u16 => Country::Togo_TGO_,
                212u16 => Country::Tokelau_TKL_,
                213u16 => Country::Tonga_TON_,
                214u16 => Country::TrinidadandTobago_TTO_,
                215u16 => Country::TromelinIsland_France_,
                216u16 => Country::Palau_PLW_,
                217u16 => Country::Tunisia_TUN_,
                218u16 => Country::Turkey_TUR_,
                219u16 => Country::TurksandCaicosIslands_TCA_,
                220u16 => Country::Tuvalu_TUV_,
                221u16 => Country::Uganda_UGA_,
                222u16 => Country::Russia_RUS_,
                223u16 => Country::UnitedArabEmirates_ARE_,
                224u16 => Country::UnitedKingdomofGreatBritainandNorthernIreland_GBR_,
                225u16 => Country::UnitedStatesofAmerica_USA_,
                226u16 => Country::Uruguay_URY_,
                227u16 => Country::Vanuatu_VUT_,
                228u16 => Country::HolySee_VAT_,
                229u16 => Country::Venezuela_BolivarianRepublicof__VEN_,
                230u16 => Country::VietNam_VNM_,
                231u16 => Country::VirginIslands_U_S___VIR_,
                232u16 => Country::WakeIsland_UnitedStates_,
                233u16 => Country::WallisandFutuna_WLF_,
                234u16 => Country::WesternSahara_ESH_,
                235u16 => Country::WestBank_Israel_,
                236u16 => Country::Samoa_WSM_,
                237u16 => Country::Yemen_YEM_,
                240u16 => Country::SerbiaandMontenegro,
                241u16 => Country::Zaire,
                242u16 => Country::Zambia_ZMB_,
                243u16 => Country::Zimbabwe_ZWE_,
                244u16 => Country::Armenia_ARM_,
                245u16 => Country::Azerbaijan_AZE_,
                246u16 => Country::Belarus_BLR_,
                247u16 => Country::BosniaandHerzegovina_BIH_,
                248u16 => Country::ClippertonIsland_France_,
                249u16 => Country::Croatia_HRV_,
                250u16 => Country::Estonia_EST_,
                251u16 => Country::Georgia_GEO_,
                252u16 => Country::Kazakhstan_KAZ_,
                253u16 => Country::Kyrgyzstan_KGZ_,
                254u16 => Country::Latvia_LVA_,
                255u16 => Country::Lithuania_LTU_,
                256u16 => Country::NorthMacedonia_MKD_,
                257u16 => Country::MidwayIslands_UnitedStates_,
                258u16 => Country::Moldova_Republicof__MDA_,
                259u16 => Country::Montenegro_MNE_,
                260u16 => Country::Russia,
                261u16 => Country::SerbiaandMontenegro_Montenegrotoseparate_,
                262u16 => Country::Slovenia_SVN_,
                263u16 => Country::Tajikistan_TJK_,
                264u16 => Country::Turkmenistan_TKM_,
                265u16 => Country::Ukraine_UKR_,
                266u16 => Country::Uzbekistan_UZB_,
                267u16 => Country::CzechRepublic_CZE_,
                268u16 => Country::Slovakia_SVK_,
                269u16 => Country::AalandIslands_ALA_,
                270u16 => Country::Bonaire_SintEustatiusandSaba_BES_,
                271u16 => Country::Congo_DemocraticRepublicofthe__COD_,
                272u16 => Country::Curacao_CUW_,
                273u16 => Country::Eritrea_ERI_,
                274u16 => Country::SaintBarthelemy_BLM_,
                275u16 => Country::SaintMartin_FrenchPart__MAF_,
                276u16 => Country::Serbia_SRB_,
                277u16 => Country::SintMaarten_Dutchpart__SXM_,
                278u16 => Country::SouthSudan_SSD_,
                279u16 => Country::SvalbardandJanMayen_SJM_,
                280u16 => Country::TimorLeste_TLS_,
                281u16 => Country::UnitedStatesMinorOutlyingIslands_UMI_,
                282u16 => Country::Palestine_Stateof_PSE_,
                unspecified_value => Country::Unspecified(unspecified_value)
            }
        }
    }

    impl From<Country> for u16 {
        fn from(value: Country) -> Self {
            match value {
                Country::Other => 0u16,
                Country::Afghanistan_AFG_ => 1u16,
                Country::Albania_ALB_ => 2u16,
                Country::Algeria_DZA_ => 3u16,
                Country::AmericanSamoa_ASM_ => 4u16,
                Country::Andorra_AND_ => 5u16,
                Country::Angola_AGO_ => 6u16,
                Country::Anguilla_AIA_ => 7u16,
                Country::Antarctica_ATA_ => 8u16,
                Country::AntiguaandBarbuda_ATG_ => 9u16,
                Country::Argentina_ARG_ => 10u16,
                Country::Aruba_ABW_ => 11u16,
                Country::AshmoreandCartierIslands_Australia_ => 12u16,
                Country::Australia_AUS_ => 13u16,
                Country::Austria_AUT_ => 14u16,
                Country::Bahamas_BHS_ => 15u16,
                Country::Bahrain_BHR_ => 16u16,
                Country::BakerIsland_UnitedStates_ => 17u16,
                Country::Bangladesh_BGD_ => 18u16,
                Country::Barbados_BRB_ => 19u16,
                Country::BassasdaIndia_France_ => 20u16,
                Country::Belgium_BEL_ => 21u16,
                Country::Belize_BLZ_ => 22u16,
                Country::Benin_BEN_ => 23u16,
                Country::Bermuda_BMU_ => 24u16,
                Country::Bhutan_BTN_ => 25u16,
                Country::Bolivia_PlurinationalStateof__BOL_ => 26u16,
                Country::Botswana_BWA_ => 27u16,
                Country::BouvetIsland_BVT_ => 28u16,
                Country::Brazil_BRA_ => 29u16,
                Country::BritishIndianOceanTerritory_IOT_ => 30u16,
                Country::VirginIslands_British__VGB_ => 31u16,
                Country::BruneiDarussalam_BRN_ => 32u16,
                Country::Bulgaria_BGR_ => 33u16,
                Country::BurkinaFaso_BFA_ => 34u16,
                Country::Myanmar_MMR_ => 35u16,
                Country::Burundi_BDI_ => 36u16,
                Country::Cambodia_KHM_ => 37u16,
                Country::Cameroon_CMR_ => 38u16,
                Country::Canada_CAN_ => 39u16,
                Country::CaboVerde_CPV_ => 40u16,
                Country::CaymanIslands_CYM_ => 41u16,
                Country::CentralAfricanRepublic_CAF_ => 42u16,
                Country::Chad_TCD_ => 43u16,
                Country::Chile_CHL_ => 44u16,
                Country::China_PeoplesRepublicof_CHN_ => 45u16,
                Country::ChristmasIsland_CXR_ => 46u16,
                Country::Cocos_Keeling_Islands_CCK_ => 47u16,
                Country::Colombia_COL_ => 48u16,
                Country::Comoros_COM_ => 49u16,
                Country::Congo_COG_ => 50u16,
                Country::CookIslands_COK_ => 51u16,
                Country::CoralSeaIslands_Australia_ => 52u16,
                Country::CostaRica_CRI_ => 53u16,
                Country::Cuba_CUB_ => 54u16,
                Country::Cyprus_CYP_ => 55u16,
                Country::Czechoslovakia_CSK_ => 56u16,
                Country::Denmark_DNK_ => 57u16,
                Country::Djibouti_DJI_ => 58u16,
                Country::Dominica_DMA_ => 59u16,
                Country::DominicanRepublic_DOM_ => 60u16,
                Country::Ecuador_ECU_ => 61u16,
                Country::Egypt_EGY_ => 62u16,
                Country::ElSalvador_SLV_ => 63u16,
                Country::EquatorialGuinea_GNQ_ => 64u16,
                Country::Ethiopia_ETH_ => 65u16,
                Country::EuropaIsland_France_ => 66u16,
                Country::FalklandIslands_Malvinas__FLK_ => 67u16,
                Country::FaroeIslands_FRO_ => 68u16,
                Country::Fiji_FJI_ => 69u16,
                Country::Finland_FIN_ => 70u16,
                Country::France_FRA_ => 71u16,
                Country::FrenchGuiana_GUF_ => 72u16,
                Country::FrenchPolynesia_PYF_ => 73u16,
                Country::FrenchSouthernTerritories_ATF_ => 74u16,
                Country::Gabon_GAB_ => 75u16,
                Country::Gambia_The_GMB_ => 76u16,
                Country::GazaStrip_Israel_ => 77u16,
                Country::Germany_DEU_ => 78u16,
                Country::Ghana_GHA_ => 79u16,
                Country::Gibraltar_GIB_ => 80u16,
                Country::GloriosoIslands_France_ => 81u16,
                Country::Greece_GRC_ => 82u16,
                Country::Greenland_GRL_ => 83u16,
                Country::Grenada_GRD_ => 84u16,
                Country::Guadeloupe_GLP_ => 85u16,
                Country::Guam_GUM_ => 86u16,
                Country::Guatemala_GTM_ => 87u16,
                Country::Guernsey_GGY_ => 88u16,
                Country::Guinea_GIN_ => 89u16,
                Country::GuineaBissau_GNB_ => 90u16,
                Country::Guyana_GUY_ => 91u16,
                Country::Haiti_HTI_ => 92u16,
                Country::HeardIslandandMcDonaldIslands_HMD_ => 93u16,
                Country::Honduras_HND_ => 94u16,
                Country::HongKong_HKG_ => 95u16,
                Country::HowlandIsland_UnitedStates_ => 96u16,
                Country::Hungary_HUN_ => 97u16,
                Country::Iceland_ISL_ => 98u16,
                Country::India_IND_ => 99u16,
                Country::Indonesia_IDN_ => 100u16,
                Country::Iran_IslamicRepublicof__IRN_ => 101u16,
                Country::Iraq_IRQ_ => 102u16,
                Country::Ireland_IRL_ => 104u16,
                Country::Israel_ISR_ => 105u16,
                Country::Italy_ITA_ => 106u16,
                Country::CotedIvoire_CIV_ => 107u16,
                Country::Jamaica_JAM_ => 108u16,
                Country::JanMayen_Norway_ => 109u16,
                Country::Japan_JPN_ => 110u16,
                Country::JarvisIsland_UnitedStates_ => 111u16,
                Country::Jersey_JEY_ => 112u16,
                Country::JohnstonAtoll_UnitedStates_ => 113u16,
                Country::Jordan_JOR_ => 114u16,
                Country::JuandeNovaIsland => 115u16,
                Country::Kenya_KEN_ => 116u16,
                Country::KingmanReef_UnitedStates_ => 117u16,
                Country::Kiribati_KIR_ => 118u16,
                Country::Korea_DemocraticPeoplesRepublicof__PRK_ => 119u16,
                Country::Korea_Republicof__KOR_ => 120u16,
                Country::Kuwait_KWT_ => 121u16,
                Country::LaoPeoplesDemocraticRepublic_LAO_ => 122u16,
                Country::Lebanon_LBN_ => 123u16,
                Country::Lesotho_LSO_ => 124u16,
                Country::Liberia_LBR_ => 125u16,
                Country::Libya_LBY_ => 126u16,
                Country::Liechtenstein_LIE_ => 127u16,
                Country::Luxembourg_LUX_ => 128u16,
                Country::Madagascar_MDG_ => 129u16,
                Country::Macao_MAC_ => 130u16,
                Country::Malawi_MWI_ => 131u16,
                Country::Malaysia_MYS_ => 132u16,
                Country::Maldives_MDV_ => 133u16,
                Country::Mali_MLI_ => 134u16,
                Country::Malta_MLT_ => 135u16,
                Country::IsleofMan_IMN_ => 136u16,
                Country::MarshallIslands_MHL_ => 137u16,
                Country::Martinique_MTQ_ => 138u16,
                Country::Mauritania_MRT_ => 139u16,
                Country::Mauritius_MUS_ => 140u16,
                Country::Mayotte_MYT_ => 141u16,
                Country::Mexico_MEX_ => 142u16,
                Country::Micronesia_FederatedStatesof__FSM_ => 143u16,
                Country::Monaco_MCO_ => 144u16,
                Country::Mongolia_MNG_ => 145u16,
                Country::Montserrat_MSR_ => 146u16,
                Country::Morocco_MAR_ => 147u16,
                Country::Mozambique_MOZ_ => 148u16,
                Country::Namibia_NAM_ => 149u16,
                Country::Nauru_NRU_ => 150u16,
                Country::NavassaIsland_UnitedStates_ => 151u16,
                Country::Nepal_NPL_ => 152u16,
                Country::Netherlands_NLD_ => 153u16,
                Country::NetherlandsAntilles_Curacao_Bonaire_Saba_SintMaartenSintEustatius_ => 154u16,
                Country::NewCaledonia_NCL_ => 155u16,
                Country::NewZealand_NZL_ => 156u16,
                Country::Nicaragua_NIC_ => 157u16,
                Country::Niger_NER_ => 158u16,
                Country::Nigeria_NGA_ => 159u16,
                Country::Niue_NIU_ => 160u16,
                Country::NorfolkIsland_NFK_ => 161u16,
                Country::NorthernMarianaIslands_MNP_ => 162u16,
                Country::Norway_NOR_ => 163u16,
                Country::Oman_OMN_ => 164u16,
                Country::Pakistan_PAK_ => 165u16,
                Country::PalmyraAtoll_UnitedStates_ => 166u16,
                Country::Panama_PAN_ => 168u16,
                Country::PapuaNewGuinea_PNG_ => 169u16,
                Country::ParacelIslands_InternationalOccupiedbyChina_alsoclaimedbyTaiwanandVietnam_ => 170u16,
                Country::Paraguay_PRY_ => 171u16,
                Country::Peru_PER_ => 172u16,
                Country::Philippines_PHL_ => 173u16,
                Country::Pitcairn_PCN_ => 174u16,
                Country::Poland_POL_ => 175u16,
                Country::Portugal_PRT_ => 176u16,
                Country::PuertoRico_PRI_ => 177u16,
                Country::Qatar_QAT_ => 178u16,
                Country::Reunion_REU_ => 179u16,
                Country::Romania_ROU_ => 180u16,
                Country::Rwanda_RWA_ => 181u16,
                Country::SaintKittsandNevis_KNA_ => 182u16,
                Country::SaintHelena_AscensionandTristandaCunha_SHN_ => 183u16,
                Country::SaintLucia_LCA_ => 184u16,
                Country::SaintPierreandMiquelon_SPM_ => 185u16,
                Country::SaintVincentandtheGrenadines_VCT_ => 186u16,
                Country::SanMarino_SMR_ => 187u16,
                Country::SaoTomeandPrincipe_STP_ => 188u16,
                Country::SaudiArabia_SAU_ => 189u16,
                Country::Senegal_SEN_ => 190u16,
                Country::Seychelles_SYC_ => 191u16,
                Country::SierraLeone_SLE_ => 192u16,
                Country::Singapore_SGP_ => 193u16,
                Country::SolomonIslands_SLB_ => 194u16,
                Country::Somalia_SOM_ => 195u16,
                Country::SouthGeorgiaandtheSouthSandwichIslands_SGS_ => 196u16,
                Country::SouthAfrica_ZAF_ => 197u16,
                Country::Spain_ESP_ => 198u16,
                Country::SpratlyIslands_InternationalpartsoccupiedandclaimedbyChina_Malaysia_Philippines_Taiwan_Vietnam_ => 199u16,
                Country::SriLanka_LKA_ => 200u16,
                Country::Sudan_SDN_ => 201u16,
                Country::Suriname_SUR_ => 202u16,
                Country::Svalbard_Norway_ => 203u16,
                Country::Eswatini_SWZ_ => 204u16,
                Country::Sweden_SWE_ => 205u16,
                Country::Switzerland_CHE_ => 206u16,
                Country::SyrianArabRepublic_SYR_ => 207u16,
                Country::Taiwan_ProvinceofChina_TWN_ => 208u16,
                Country::Tanzania_UnitedRepublicof_TZA_ => 209u16,
                Country::Thailand_THA_ => 210u16,
                Country::Togo_TGO_ => 211u16,
                Country::Tokelau_TKL_ => 212u16,
                Country::Tonga_TON_ => 213u16,
                Country::TrinidadandTobago_TTO_ => 214u16,
                Country::TromelinIsland_France_ => 215u16,
                Country::Palau_PLW_ => 216u16,
                Country::Tunisia_TUN_ => 217u16,
                Country::Turkey_TUR_ => 218u16,
                Country::TurksandCaicosIslands_TCA_ => 219u16,
                Country::Tuvalu_TUV_ => 220u16,
                Country::Uganda_UGA_ => 221u16,
                Country::Russia_RUS_ => 222u16,
                Country::UnitedArabEmirates_ARE_ => 223u16,
                Country::UnitedKingdomofGreatBritainandNorthernIreland_GBR_ => 224u16,
                Country::UnitedStatesofAmerica_USA_ => 225u16,
                Country::Uruguay_URY_ => 226u16,
                Country::Vanuatu_VUT_ => 227u16,
                Country::HolySee_VAT_ => 228u16,
                Country::Venezuela_BolivarianRepublicof__VEN_ => 229u16,
                Country::VietNam_VNM_ => 230u16,
                Country::VirginIslands_U_S___VIR_ => 231u16,
                Country::WakeIsland_UnitedStates_ => 232u16,
                Country::WallisandFutuna_WLF_ => 233u16,
                Country::WesternSahara_ESH_ => 234u16,
                Country::WestBank_Israel_ => 235u16,
                Country::Samoa_WSM_ => 236u16,
                Country::Yemen_YEM_ => 237u16,
                Country::SerbiaandMontenegro => 240u16,
                Country::Zaire => 241u16,
                Country::Zambia_ZMB_ => 242u16,
                Country::Zimbabwe_ZWE_ => 243u16,
                Country::Armenia_ARM_ => 244u16,
                Country::Azerbaijan_AZE_ => 245u16,
                Country::Belarus_BLR_ => 246u16,
                Country::BosniaandHerzegovina_BIH_ => 247u16,
                Country::ClippertonIsland_France_ => 248u16,
                Country::Croatia_HRV_ => 249u16,
                Country::Estonia_EST_ => 250u16,
                Country::Georgia_GEO_ => 251u16,
                Country::Kazakhstan_KAZ_ => 252u16,
                Country::Kyrgyzstan_KGZ_ => 253u16,
                Country::Latvia_LVA_ => 254u16,
                Country::Lithuania_LTU_ => 255u16,
                Country::NorthMacedonia_MKD_ => 256u16,
                Country::MidwayIslands_UnitedStates_ => 257u16,
                Country::Moldova_Republicof__MDA_ => 258u16,
                Country::Montenegro_MNE_ => 259u16,
                Country::Russia => 260u16,
                Country::SerbiaandMontenegro_Montenegrotoseparate_ => 261u16,
                Country::Slovenia_SVN_ => 262u16,
                Country::Tajikistan_TJK_ => 263u16,
                Country::Turkmenistan_TKM_ => 264u16,
                Country::Ukraine_UKR_ => 265u16,
                Country::Uzbekistan_UZB_ => 266u16,
                Country::CzechRepublic_CZE_ => 267u16,
                Country::Slovakia_SVK_ => 268u16,
                Country::AalandIslands_ALA_ => 269u16,
                Country::Bonaire_SintEustatiusandSaba_BES_ => 270u16,
                Country::Congo_DemocraticRepublicofthe__COD_ => 271u16,
                Country::Curacao_CUW_ => 272u16,
                Country::Eritrea_ERI_ => 273u16,
                Country::SaintBarthelemy_BLM_ => 274u16,
                Country::SaintMartin_FrenchPart__MAF_ => 275u16,
                Country::Serbia_SRB_ => 276u16,
                Country::SintMaarten_Dutchpart__SXM_ => 277u16,
                Country::SouthSudan_SSD_ => 278u16,
                Country::SvalbardandJanMayen_SJM_ => 279u16,
                Country::TimorLeste_TLS_ => 280u16,
                Country::UnitedStatesMinorOutlyingIslands_UMI_ => 281u16,
                Country::Palestine_Stateof_PSE_ => 282u16,
                Country::Unspecified(unspecified_value) => unspecified_value
            }
        }
    }

    impl Display for Country {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            match self {
                Country::Other => write!(f, "{}", "Other"),
                Country::Afghanistan_AFG_ => write!(f, "{}", "Afghanistan (AFG)"),
                Country::Albania_ALB_ => write!(f, "{}", "Albania (ALB)"),
                Country::Algeria_DZA_ => write!(f, "{}", "Algeria (DZA)"),
                Country::AmericanSamoa_ASM_ => write!(f, "{}", "American Samoa (ASM)"),
                Country::Andorra_AND_ => write!(f, "{}", "Andorra (AND)"),
                Country::Angola_AGO_ => write!(f, "{}", "Angola (AGO)"),
                Country::Anguilla_AIA_ => write!(f, "{}", "Anguilla (AIA)"),
                Country::Antarctica_ATA_ => write!(f, "{}", "Antarctica (ATA)"),
                Country::AntiguaandBarbuda_ATG_ => write!(f, "{}", "Antigua and Barbuda (ATG)"),
                Country::Argentina_ARG_ => write!(f, "{}", "Argentina (ARG)"),
                Country::Aruba_ABW_ => write!(f, "{}", "Aruba (ABW)"),
                Country::AshmoreandCartierIslands_Australia_ => write!(f, "{}", "Ashmore and Cartier Islands (Australia)"),
                Country::Australia_AUS_ => write!(f, "{}", "Australia (AUS)"),
                Country::Austria_AUT_ => write!(f, "{}", "Austria (AUT)"),
                Country::Bahamas_BHS_ => write!(f, "{}", "Bahamas (BHS)"),
                Country::Bahrain_BHR_ => write!(f, "{}", "Bahrain (BHR)"),
                Country::BakerIsland_UnitedStates_ => write!(f, "{}", "Baker Island (United States)"),
                Country::Bangladesh_BGD_ => write!(f, "{}", "Bangladesh (BGD)"),
                Country::Barbados_BRB_ => write!(f, "{}", "Barbados (BRB)"),
                Country::BassasdaIndia_France_ => write!(f, "{}", "Bassas da India (France)"),
                Country::Belgium_BEL_ => write!(f, "{}", "Belgium (BEL)"),
                Country::Belize_BLZ_ => write!(f, "{}", "Belize (BLZ)"),
                Country::Benin_BEN_ => write!(f, "{}", "Benin (BEN)"),
                Country::Bermuda_BMU_ => write!(f, "{}", "Bermuda (BMU)"),
                Country::Bhutan_BTN_ => write!(f, "{}", "Bhutan (BTN)"),
                Country::Bolivia_PlurinationalStateof__BOL_ => write!(f, "{}", "Bolivia (Plurinational State of) (BOL)"),
                Country::Botswana_BWA_ => write!(f, "{}", "Botswana (BWA)"),
                Country::BouvetIsland_BVT_ => write!(f, "{}", "Bouvet Island (BVT)"),
                Country::Brazil_BRA_ => write!(f, "{}", "Brazil (BRA)"),
                Country::BritishIndianOceanTerritory_IOT_ => write!(f, "{}", "British Indian Ocean Territory (IOT)"),
                Country::VirginIslands_British__VGB_ => write!(f, "{}", "Virgin Islands (British) (VGB)"),
                Country::BruneiDarussalam_BRN_ => write!(f, "{}", "Brunei Darussalam (BRN)"),
                Country::Bulgaria_BGR_ => write!(f, "{}", "Bulgaria (BGR)"),
                Country::BurkinaFaso_BFA_ => write!(f, "{}", "Burkina Faso (BFA)"),
                Country::Myanmar_MMR_ => write!(f, "{}", "Myanmar (MMR)"),
                Country::Burundi_BDI_ => write!(f, "{}", "Burundi (BDI)"),
                Country::Cambodia_KHM_ => write!(f, "{}", "Cambodia (KHM)"),
                Country::Cameroon_CMR_ => write!(f, "{}", "Cameroon (CMR)"),
                Country::Canada_CAN_ => write!(f, "{}", "Canada (CAN)"),
                Country::CaboVerde_CPV_ => write!(f, "{}", "Cabo Verde (CPV)"),
                Country::CaymanIslands_CYM_ => write!(f, "{}", "Cayman Islands (CYM)"),
                Country::CentralAfricanRepublic_CAF_ => write!(f, "{}", "Central African Republic (CAF)"),
                Country::Chad_TCD_ => write!(f, "{}", "Chad (TCD)"),
                Country::Chile_CHL_ => write!(f, "{}", "Chile (CHL)"),
                Country::China_PeoplesRepublicof_CHN_ => write!(f, "{}", "China, People's Republic of (CHN)"),
                Country::ChristmasIsland_CXR_ => write!(f, "{}", "Christmas Island (CXR)"),
                Country::Cocos_Keeling_Islands_CCK_ => write!(f, "{}", "Cocos (Keeling) Islands (CCK)"),
                Country::Colombia_COL_ => write!(f, "{}", "Colombia (COL)"),
                Country::Comoros_COM_ => write!(f, "{}", "Comoros (COM)"),
                Country::Congo_COG_ => write!(f, "{}", "Congo (COG)"),
                Country::CookIslands_COK_ => write!(f, "{}", "Cook Islands (COK)"),
                Country::CoralSeaIslands_Australia_ => write!(f, "{}", "Coral Sea Islands (Australia)"),
                Country::CostaRica_CRI_ => write!(f, "{}", "Costa Rica (CRI)"),
                Country::Cuba_CUB_ => write!(f, "{}", "Cuba (CUB)"),
                Country::Cyprus_CYP_ => write!(f, "{}", "Cyprus (CYP)"),
                Country::Czechoslovakia_CSK_ => write!(f, "{}", "Czechoslovakia (CSK)"),
                Country::Denmark_DNK_ => write!(f, "{}", "Denmark (DNK)"),
                Country::Djibouti_DJI_ => write!(f, "{}", "Djibouti (DJI)"),
                Country::Dominica_DMA_ => write!(f, "{}", "Dominica (DMA)"),
                Country::DominicanRepublic_DOM_ => write!(f, "{}", "Dominican Republic (DOM)"),
                Country::Ecuador_ECU_ => write!(f, "{}", "Ecuador (ECU)"),
                Country::Egypt_EGY_ => write!(f, "{}", "Egypt (EGY)"),
                Country::ElSalvador_SLV_ => write!(f, "{}", "El Salvador (SLV)"),
                Country::EquatorialGuinea_GNQ_ => write!(f, "{}", "Equatorial Guinea (GNQ)"),
                Country::Ethiopia_ETH_ => write!(f, "{}", "Ethiopia (ETH)"),
                Country::EuropaIsland_France_ => write!(f, "{}", "Europa Island (France)"),
                Country::FalklandIslands_Malvinas__FLK_ => write!(f, "{}", "Falkland Islands (Malvinas) (FLK)"),
                Country::FaroeIslands_FRO_ => write!(f, "{}", "Faroe Islands (FRO)"),
                Country::Fiji_FJI_ => write!(f, "{}", "Fiji (FJI)"),
                Country::Finland_FIN_ => write!(f, "{}", "Finland (FIN)"),
                Country::France_FRA_ => write!(f, "{}", "France (FRA)"),
                Country::FrenchGuiana_GUF_ => write!(f, "{}", "French Guiana (GUF)"),
                Country::FrenchPolynesia_PYF_ => write!(f, "{}", "French Polynesia (PYF)"),
                Country::FrenchSouthernTerritories_ATF_ => write!(f, "{}", "French Southern Territories (ATF)"),
                Country::Gabon_GAB_ => write!(f, "{}", "Gabon (GAB)"),
                Country::Gambia_The_GMB_ => write!(f, "{}", "Gambia, The (GMB)"),
                Country::GazaStrip_Israel_ => write!(f, "{}", "Gaza Strip (Israel)"),
                Country::Germany_DEU_ => write!(f, "{}", "Germany (DEU)"),
                Country::Ghana_GHA_ => write!(f, "{}", "Ghana (GHA)"),
                Country::Gibraltar_GIB_ => write!(f, "{}", "Gibraltar (GIB)"),
                Country::GloriosoIslands_France_ => write!(f, "{}", "Glorioso Islands (France)"),
                Country::Greece_GRC_ => write!(f, "{}", "Greece (GRC)"),
                Country::Greenland_GRL_ => write!(f, "{}", "Greenland (GRL)"),
                Country::Grenada_GRD_ => write!(f, "{}", "Grenada (GRD)"),
                Country::Guadeloupe_GLP_ => write!(f, "{}", "Guadeloupe (GLP)"),
                Country::Guam_GUM_ => write!(f, "{}", "Guam (GUM)"),
                Country::Guatemala_GTM_ => write!(f, "{}", "Guatemala (GTM)"),
                Country::Guernsey_GGY_ => write!(f, "{}", "Guernsey (GGY)"),
                Country::Guinea_GIN_ => write!(f, "{}", "Guinea (GIN)"),
                Country::GuineaBissau_GNB_ => write!(f, "{}", "Guinea-Bissau (GNB)"),
                Country::Guyana_GUY_ => write!(f, "{}", "Guyana (GUY)"),
                Country::Haiti_HTI_ => write!(f, "{}", "Haiti (HTI)"),
                Country::HeardIslandandMcDonaldIslands_HMD_ => write!(f, "{}", "Heard Island and McDonald Islands (HMD)"),
                Country::Honduras_HND_ => write!(f, "{}", "Honduras (HND)"),
                Country::HongKong_HKG_ => write!(f, "{}", "Hong Kong (HKG)"),
                Country::HowlandIsland_UnitedStates_ => write!(f, "{}", "Howland Island (United States)"),
                Country::Hungary_HUN_ => write!(f, "{}", "Hungary (HUN)"),
                Country::Iceland_ISL_ => write!(f, "{}", "Iceland (ISL)"),
                Country::India_IND_ => write!(f, "{}", "India (IND)"),
                Country::Indonesia_IDN_ => write!(f, "{}", "Indonesia (IDN)"),
                Country::Iran_IslamicRepublicof__IRN_ => write!(f, "{}", "Iran (Islamic Republic of) (IRN)"),
                Country::Iraq_IRQ_ => write!(f, "{}", "Iraq (IRQ)"),
                Country::Ireland_IRL_ => write!(f, "{}", "Ireland (IRL)"),
                Country::Israel_ISR_ => write!(f, "{}", "Israel (ISR)"),
                Country::Italy_ITA_ => write!(f, "{}", "Italy (ITA)"),
                Country::CotedIvoire_CIV_ => write!(f, "{}", "Cote d'Ivoire (CIV)"),
                Country::Jamaica_JAM_ => write!(f, "{}", "Jamaica (JAM)"),
                Country::JanMayen_Norway_ => write!(f, "{}", "Jan Mayen (Norway)"),
                Country::Japan_JPN_ => write!(f, "{}", "Japan (JPN)"),
                Country::JarvisIsland_UnitedStates_ => write!(f, "{}", "Jarvis Island (United States)"),
                Country::Jersey_JEY_ => write!(f, "{}", "Jersey (JEY)"),
                Country::JohnstonAtoll_UnitedStates_ => write!(f, "{}", "Johnston Atoll (United States)"),
                Country::Jordan_JOR_ => write!(f, "{}", "Jordan (JOR)"),
                Country::JuandeNovaIsland => write!(f, "{}", "Juan de Nova Island"),
                Country::Kenya_KEN_ => write!(f, "{}", "Kenya (KEN)"),
                Country::KingmanReef_UnitedStates_ => write!(f, "{}", "Kingman Reef (United States)"),
                Country::Kiribati_KIR_ => write!(f, "{}", "Kiribati (KIR)"),
                Country::Korea_DemocraticPeoplesRepublicof__PRK_ => write!(f, "{}", "Korea (Democratic People's Republic of) (PRK)"),
                Country::Korea_Republicof__KOR_ => write!(f, "{}", "Korea (Republic of) (KOR)"),
                Country::Kuwait_KWT_ => write!(f, "{}", "Kuwait (KWT)"),
                Country::LaoPeoplesDemocraticRepublic_LAO_ => write!(f, "{}", "Lao People's Democratic Republic (LAO)"),
                Country::Lebanon_LBN_ => write!(f, "{}", "Lebanon (LBN)"),
                Country::Lesotho_LSO_ => write!(f, "{}", "Lesotho (LSO)"),
                Country::Liberia_LBR_ => write!(f, "{}", "Liberia (LBR)"),
                Country::Libya_LBY_ => write!(f, "{}", "Libya (LBY)"),
                Country::Liechtenstein_LIE_ => write!(f, "{}", "Liechtenstein (LIE)"),
                Country::Luxembourg_LUX_ => write!(f, "{}", "Luxembourg (LUX)"),
                Country::Madagascar_MDG_ => write!(f, "{}", "Madagascar (MDG)"),
                Country::Macao_MAC_ => write!(f, "{}", "Macao (MAC)"),
                Country::Malawi_MWI_ => write!(f, "{}", "Malawi (MWI)"),
                Country::Malaysia_MYS_ => write!(f, "{}", "Malaysia (MYS)"),
                Country::Maldives_MDV_ => write!(f, "{}", "Maldives (MDV)"),
                Country::Mali_MLI_ => write!(f, "{}", "Mali (MLI)"),
                Country::Malta_MLT_ => write!(f, "{}", "Malta (MLT)"),
                Country::IsleofMan_IMN_ => write!(f, "{}", "Isle of Man (IMN)"),
                Country::MarshallIslands_MHL_ => write!(f, "{}", "Marshall Islands (MHL)"),
                Country::Martinique_MTQ_ => write!(f, "{}", "Martinique (MTQ)"),
                Country::Mauritania_MRT_ => write!(f, "{}", "Mauritania (MRT)"),
                Country::Mauritius_MUS_ => write!(f, "{}", "Mauritius (MUS)"),
                Country::Mayotte_MYT_ => write!(f, "{}", "Mayotte (MYT)"),
                Country::Mexico_MEX_ => write!(f, "{}", "Mexico (MEX)"),
                Country::Micronesia_FederatedStatesof__FSM_ => write!(f, "{}", "Micronesia (Federated States of) (FSM)"),
                Country::Monaco_MCO_ => write!(f, "{}", "Monaco (MCO)"),
                Country::Mongolia_MNG_ => write!(f, "{}", "Mongolia (MNG)"),
                Country::Montserrat_MSR_ => write!(f, "{}", "Montserrat (MSR)"),
                Country::Morocco_MAR_ => write!(f, "{}", "Morocco (MAR)"),
                Country::Mozambique_MOZ_ => write!(f, "{}", "Mozambique (MOZ)"),
                Country::Namibia_NAM_ => write!(f, "{}", "Namibia (NAM)"),
                Country::Nauru_NRU_ => write!(f, "{}", "Nauru (NRU)"),
                Country::NavassaIsland_UnitedStates_ => write!(f, "{}", "Navassa Island (United States)"),
                Country::Nepal_NPL_ => write!(f, "{}", "Nepal (NPL)"),
                Country::Netherlands_NLD_ => write!(f, "{}", "Netherlands (NLD)"),
                Country::NetherlandsAntilles_Curacao_Bonaire_Saba_SintMaartenSintEustatius_ => write!(f, "{}", "Netherlands Antilles (Curacao, Bonaire, Saba, Sint Maarten Sint Eustatius)"),
                Country::NewCaledonia_NCL_ => write!(f, "{}", "New Caledonia (NCL)"),
                Country::NewZealand_NZL_ => write!(f, "{}", "New Zealand (NZL)"),
                Country::Nicaragua_NIC_ => write!(f, "{}", "Nicaragua (NIC)"),
                Country::Niger_NER_ => write!(f, "{}", "Niger (NER)"),
                Country::Nigeria_NGA_ => write!(f, "{}", "Nigeria (NGA)"),
                Country::Niue_NIU_ => write!(f, "{}", "Niue (NIU)"),
                Country::NorfolkIsland_NFK_ => write!(f, "{}", "Norfolk Island (NFK)"),
                Country::NorthernMarianaIslands_MNP_ => write!(f, "{}", "Northern Mariana Islands (MNP)"),
                Country::Norway_NOR_ => write!(f, "{}", "Norway (NOR)"),
                Country::Oman_OMN_ => write!(f, "{}", "Oman (OMN)"),
                Country::Pakistan_PAK_ => write!(f, "{}", "Pakistan (PAK)"),
                Country::PalmyraAtoll_UnitedStates_ => write!(f, "{}", "Palmyra Atoll (United States)"),
                Country::Panama_PAN_ => write!(f, "{}", "Panama (PAN)"),
                Country::PapuaNewGuinea_PNG_ => write!(f, "{}", "Papua New Guinea (PNG)"),
                Country::ParacelIslands_InternationalOccupiedbyChina_alsoclaimedbyTaiwanandVietnam_ => write!(f, "{}", "Paracel Islands (International - Occupied by China, also claimed by Taiwan and Vietnam)"),
                Country::Paraguay_PRY_ => write!(f, "{}", "Paraguay (PRY)"),
                Country::Peru_PER_ => write!(f, "{}", "Peru (PER)"),
                Country::Philippines_PHL_ => write!(f, "{}", "Philippines (PHL)"),
                Country::Pitcairn_PCN_ => write!(f, "{}", "Pitcairn (PCN)"),
                Country::Poland_POL_ => write!(f, "{}", "Poland (POL)"),
                Country::Portugal_PRT_ => write!(f, "{}", "Portugal (PRT)"),
                Country::PuertoRico_PRI_ => write!(f, "{}", "Puerto Rico (PRI)"),
                Country::Qatar_QAT_ => write!(f, "{}", "Qatar (QAT)"),
                Country::Reunion_REU_ => write!(f, "{}", "Reunion (REU)"),
                Country::Romania_ROU_ => write!(f, "{}", "Romania (ROU)"),
                Country::Rwanda_RWA_ => write!(f, "{}", "Rwanda (RWA)"),
                Country::SaintKittsandNevis_KNA_ => write!(f, "{}", "Saint Kitts and Nevis (KNA)"),
                Country::SaintHelena_AscensionandTristandaCunha_SHN_ => write!(f, "{}", "Saint Helena, Ascension and Tristan da Cunha (SHN)"),
                Country::SaintLucia_LCA_ => write!(f, "{}", "Saint Lucia (LCA)"),
                Country::SaintPierreandMiquelon_SPM_ => write!(f, "{}", "Saint Pierre and Miquelon (SPM)"),
                Country::SaintVincentandtheGrenadines_VCT_ => write!(f, "{}", "Saint Vincent and the Grenadines (VCT)"),
                Country::SanMarino_SMR_ => write!(f, "{}", "San Marino (SMR)"),
                Country::SaoTomeandPrincipe_STP_ => write!(f, "{}", "Sao Tome and Principe (STP)"),
                Country::SaudiArabia_SAU_ => write!(f, "{}", "Saudi Arabia (SAU)"),
                Country::Senegal_SEN_ => write!(f, "{}", "Senegal (SEN)"),
                Country::Seychelles_SYC_ => write!(f, "{}", "Seychelles (SYC)"),
                Country::SierraLeone_SLE_ => write!(f, "{}", "Sierra Leone (SLE)"),
                Country::Singapore_SGP_ => write!(f, "{}", "Singapore (SGP)"),
                Country::SolomonIslands_SLB_ => write!(f, "{}", "Solomon Islands (SLB)"),
                Country::Somalia_SOM_ => write!(f, "{}", "Somalia (SOM)"),
                Country::SouthGeorgiaandtheSouthSandwichIslands_SGS_ => write!(f, "{}", "South Georgia and the South Sandwich Islands (SGS)"),
                Country::SouthAfrica_ZAF_ => write!(f, "{}", "South Africa (ZAF)"),
                Country::Spain_ESP_ => write!(f, "{}", "Spain (ESP)"),
                Country::SpratlyIslands_InternationalpartsoccupiedandclaimedbyChina_Malaysia_Philippines_Taiwan_Vietnam_ => write!(f, "{}", "Spratly Islands (International - parts occupied and claimed by China,Malaysia, Philippines, Taiwan, Vietnam)"),
                Country::SriLanka_LKA_ => write!(f, "{}", "Sri Lanka (LKA)"),
                Country::Sudan_SDN_ => write!(f, "{}", "Sudan (SDN)"),
                Country::Suriname_SUR_ => write!(f, "{}", "Suriname (SUR)"),
                Country::Svalbard_Norway_ => write!(f, "{}", "Svalbard (Norway)"),
                Country::Eswatini_SWZ_ => write!(f, "{}", "Eswatini (SWZ)"),
                Country::Sweden_SWE_ => write!(f, "{}", "Sweden (SWE)"),
                Country::Switzerland_CHE_ => write!(f, "{}", "Switzerland (CHE)"),
                Country::SyrianArabRepublic_SYR_ => write!(f, "{}", "Syrian Arab Republic (SYR)"),
                Country::Taiwan_ProvinceofChina_TWN_ => write!(f, "{}", "Taiwan, Province of China (TWN)"),
                Country::Tanzania_UnitedRepublicof_TZA_ => write!(f, "{}", "Tanzania, United Republic of (TZA)"),
                Country::Thailand_THA_ => write!(f, "{}", "Thailand (THA)"),
                Country::Togo_TGO_ => write!(f, "{}", "Togo (TGO)"),
                Country::Tokelau_TKL_ => write!(f, "{}", "Tokelau (TKL)"),
                Country::Tonga_TON_ => write!(f, "{}", "Tonga (TON)"),
                Country::TrinidadandTobago_TTO_ => write!(f, "{}", "Trinidad and Tobago (TTO)"),
                Country::TromelinIsland_France_ => write!(f, "{}", "Tromelin Island (France)"),
                Country::Palau_PLW_ => write!(f, "{}", "Palau (PLW)"),
                Country::Tunisia_TUN_ => write!(f, "{}", "Tunisia (TUN)"),
                Country::Turkey_TUR_ => write!(f, "{}", "Turkey (TUR)"),
                Country::TurksandCaicosIslands_TCA_ => write!(f, "{}", "Turks and Caicos Islands (TCA)"),
                Country::Tuvalu_TUV_ => write!(f, "{}", "Tuvalu (TUV)"),
                Country::Uganda_UGA_ => write!(f, "{}", "Uganda (UGA)"),
                Country::Russia_RUS_ => write!(f, "{}", "Russia (RUS)"),
                Country::UnitedArabEmirates_ARE_ => write!(f, "{}", "United Arab Emirates (ARE)"),
                Country::UnitedKingdomofGreatBritainandNorthernIreland_GBR_ => write!(f, "{}", "United Kingdom of Great Britain and Northern Ireland (GBR)"),
                Country::UnitedStatesofAmerica_USA_ => write!(f, "{}", "United States of America (USA)"),
                Country::Uruguay_URY_ => write!(f, "{}", "Uruguay (URY)"),
                Country::Vanuatu_VUT_ => write!(f, "{}", "Vanuatu (VUT)"),
                Country::HolySee_VAT_ => write!(f, "{}", "Holy See (VAT)"),
                Country::Venezuela_BolivarianRepublicof__VEN_ => write!(f, "{}", "Venezuela (Bolivarian Republic of) (VEN)"),
                Country::VietNam_VNM_ => write!(f, "{}", "Viet Nam (VNM)"),
                Country::VirginIslands_U_S___VIR_ => write!(f, "{}", "Virgin Islands (U.S.) (VIR)"),
                Country::WakeIsland_UnitedStates_ => write!(f, "{}", "Wake Island (United States)"),
                Country::WallisandFutuna_WLF_ => write!(f, "{}", "Wallis and Futuna (WLF)"),
                Country::WesternSahara_ESH_ => write!(f, "{}", "Western Sahara (ESH)"),
                Country::WestBank_Israel_ => write!(f, "{}", "West Bank (Israel)"),
                Country::Samoa_WSM_ => write!(f, "{}", "Samoa (WSM)"),
                Country::Yemen_YEM_ => write!(f, "{}", "Yemen (YEM)"),
                Country::SerbiaandMontenegro => write!(f, "{}", "Serbia and Montenegro"),
                Country::Zaire => write!(f, "{}", "Zaire"),
                Country::Zambia_ZMB_ => write!(f, "{}", "Zambia (ZMB)"),
                Country::Zimbabwe_ZWE_ => write!(f, "{}", "Zimbabwe (ZWE)"),
                Country::Armenia_ARM_ => write!(f, "{}", "Armenia (ARM)"),
                Country::Azerbaijan_AZE_ => write!(f, "{}", "Azerbaijan (AZE)"),
                Country::Belarus_BLR_ => write!(f, "{}", "Belarus (BLR)"),
                Country::BosniaandHerzegovina_BIH_ => write!(f, "{}", "Bosnia and Herzegovina (BIH)"),
                Country::ClippertonIsland_France_ => write!(f, "{}", "Clipperton Island (France)"),
                Country::Croatia_HRV_ => write!(f, "{}", "Croatia (HRV)"),
                Country::Estonia_EST_ => write!(f, "{}", "Estonia (EST)"),
                Country::Georgia_GEO_ => write!(f, "{}", "Georgia (GEO)"),
                Country::Kazakhstan_KAZ_ => write!(f, "{}", "Kazakhstan (KAZ)"),
                Country::Kyrgyzstan_KGZ_ => write!(f, "{}", "Kyrgyzstan (KGZ)"),
                Country::Latvia_LVA_ => write!(f, "{}", "Latvia (LVA)"),
                Country::Lithuania_LTU_ => write!(f, "{}", "Lithuania (LTU)"),
                Country::NorthMacedonia_MKD_ => write!(f, "{}", "North Macedonia (MKD)"),
                Country::MidwayIslands_UnitedStates_ => write!(f, "{}", "Midway Islands (United States)"),
                Country::Moldova_Republicof__MDA_ => write!(f, "{}", "Moldova (Republic of) (MDA)"),
                Country::Montenegro_MNE_ => write!(f, "{}", "Montenegro (MNE)"),
                Country::Russia => write!(f, "{}", "Russia"),
                Country::SerbiaandMontenegro_Montenegrotoseparate_ => write!(f, "{}", "Serbia and Montenegro (Montenegro to separate)"),
                Country::Slovenia_SVN_ => write!(f, "{}", "Slovenia (SVN)"),
                Country::Tajikistan_TJK_ => write!(f, "{}", "Tajikistan (TJK)"),
                Country::Turkmenistan_TKM_ => write!(f, "{}", "Turkmenistan (TKM)"),
                Country::Ukraine_UKR_ => write!(f, "{}", "Ukraine (UKR)"),
                Country::Uzbekistan_UZB_ => write!(f, "{}", "Uzbekistan (UZB)"),
                Country::CzechRepublic_CZE_ => write!(f, "{}", "Czech Republic (CZE)"),
                Country::Slovakia_SVK_ => write!(f, "{}", "Slovakia (SVK)"),
                Country::AalandIslands_ALA_ => write!(f, "{}", "Aaland Islands (ALA)"),
                Country::Bonaire_SintEustatiusandSaba_BES_ => write!(f, "{}", "Bonaire, Sint Eustatius and Saba (BES)"),
                Country::Congo_DemocraticRepublicofthe__COD_ => write!(f, "{}", "Congo (Democratic Republic of the) (COD)"),
                Country::Curacao_CUW_ => write!(f, "{}", "Curacao (CUW)"),
                Country::Eritrea_ERI_ => write!(f, "{}", "Eritrea (ERI)"),
                Country::SaintBarthelemy_BLM_ => write!(f, "{}", "Saint Barthelemy (BLM)"),
                Country::SaintMartin_FrenchPart__MAF_ => write!(f, "{}", "Saint Martin (French Part) (MAF)"),
                Country::Serbia_SRB_ => write!(f, "{}", "Serbia (SRB)"),
                Country::SintMaarten_Dutchpart__SXM_ => write!(f, "{}", "Sint Maarten (Dutch part) (SXM)"),
                Country::SouthSudan_SSD_ => write!(f, "{}", "South Sudan (SSD)"),
                Country::SvalbardandJanMayen_SJM_ => write!(f, "{}", "Svalbard and Jan Mayen (SJM)"),
                Country::TimorLeste_TLS_ => write!(f, "{}", "Timor-Leste (TLS)"),
                Country::UnitedStatesMinorOutlyingIslands_UMI_ => write!(f, "{}", "United States Minor Outlying Islands (UMI)"),
                Country::Palestine_Stateof_PSE_ => write!(f, "{}", "Palestine, State of (PSE)"),
                Country::Unspecified(unspecified_value) => write!(f, "Unspecified ({})", unspecified_value)
            }
        }
    }

    impl Default for Country { fn default() -> Self { Country::from(0) } }

    #[derive(Copy, Clone, Debug, PartialEq)]
    #[allow(non_camel_case_types)]
    pub enum EntityMarkingCharacterSet { Unused, ASCII, U_S_ArmyMarking, DigitChevron, Unspecified(u8) }

    impl From<u8> for EntityMarkingCharacterSet {
        fn from(value: u8) -> Self {
            match value {
                0u8 => EntityMarkingCharacterSet::Unused,
                1u8 => EntityMarkingCharacterSet::ASCII,
                2u8 => EntityMarkingCharacterSet::U_S_ArmyMarking,
                3u8 => EntityMarkingCharacterSet::DigitChevron,
                unspecified_value => EntityMarkingCharacterSet::Unspecified(unspecified_value)
            }
        }
    }

    impl From<EntityMarkingCharacterSet> for u8 {
        fn from(value: EntityMarkingCharacterSet) -> Self {
            match value {
                EntityMarkingCharacterSet::Unused => 0u8,
                EntityMarkingCharacterSet::ASCII => 1u8,
                EntityMarkingCharacterSet::U_S_ArmyMarking => 2u8,
                EntityMarkingCharacterSet::DigitChevron => 3u8,
                EntityMarkingCharacterSet::Unspecified(unspecified_value) => unspecified_value
            }
        }
    }

    impl Display for EntityMarkingCharacterSet {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            match self {
                EntityMarkingCharacterSet::Unused => write!(f, "{}", "Unused"),
                EntityMarkingCharacterSet::ASCII => write!(f, "{}", "ASCII"),
                EntityMarkingCharacterSet::U_S_ArmyMarking => write!(f, "{}", "U.S. Army Marking"),
                EntityMarkingCharacterSet::DigitChevron => write!(f, "{}", "Digit Chevron"),
                EntityMarkingCharacterSet::Unspecified(unspecified_value) => write!(f, "Unspecified ({})", unspecified_value)
            }
        }
    }

    impl Default for EntityMarkingCharacterSet { fn default() -> Self { EntityMarkingCharacterSet::from(0) } }

    #[derive(Copy, Clone, Debug, PartialEq)]
    #[allow(non_camel_case_types)]
    pub enum MunitionDescriptorWarhead {
        Other,
        Cargo_VariableSubmunitions_,
        FuelAirExplosive,
        GlassBeads,
        _1um_31,
        _5um_32,
        _10um_33,
        HighExplosive_HE_,
        HE_Plastic,
        HE_Incendiary,
        HE_Fragmentation,
        HE_AntiTank,
        HE_Bomblets,
        HE_ShapedCharge,
        HE_ContinuousRod,
        HE_TungstenBall,
        HE_BlastFragmentation,
        HE_SteerableDartswithHE,
        HE_Darts,
        HE_Flechettes,
        HE_DirectedFragmentation,
        HE_SemiArmorPiercing_SAP_,
        HE_ShapedChargeFragmentation,
        HE_SemiArmorPiercing_Fragmentation,
        HE_HollowCharge,
        HE_DoubleHollowCharge,
        HE_GeneralPurpose,
        HE_BlastPenetrator,
        HE_RodPenetrator,
        HE_AntiPersonnel,
        HE_ShapedCharge_Fragmentation_Incendiary,
        HE_Penetrator_Blast_Fragmentation,
        Smoke,
        WP_WhitePhosphorus_,
        FOGO_FogOil_,
        HC_HexaChloroEthane_,
        Illumination,
        Practice,
        Blank,
        Dummy,
        Kinetic,
        Mines,
        Nuclear,
        Nuclear_IMT,
        Chemical_General,
        Chemical_BlisterAgent,
        HD_Mustard_,
        ThickenedHD_Mustard_,
        DustyHD_Mustard_,
        L_Lewisite_,
        HN3_NitrogenMustard_,
        HL_MustardLewisite_,
        CX_PhosgeneOxime_,
        DMMP_PhosphateDimethylHydrogen_,
        DMHP_Phosphite_,
        DMA_DimethylAcrylate_,
        DEM,
        PX_Pxlene_,
        Chemical_BloodAgent,
        AC_HCN_,
        CK_CNCI_,
        CG_Phosgene_,
        Chemical_NerveAgent,
        VX,
        ThickenedVX,
        DustyVX,
        GA_Tabun_,
        ThickenedGA_Tabun_,
        DustyGA_Tabun_,
        GB_Sarin_,
        ThickenedGB_Sarin_,
        DustyGB_Sarin_,
        GD_Soman_,
        ThickenedGD_Soman_,
        DustyGD_Soman_,
        GF,
        ThickenedGF,
        DustyGF,
        SVX_SovietVX_,
        BIS,
        TCP,
        MS_MethylSalicylate_,
        TEP,
        H2O_Water_,
        TO1_ToxicOrganic1_,
        TO2_ToxicOrganic2_,
        TO3_ToxicOrganic3_,
        SulfurHexafluoride,
        AA_AceticAcid_,
        HF_HydrofluoricAcid_,
        Biological,
        Biological_Virus,
        Biological_Bacteria,
        Biological_Rickettsia,
        Biological_GeneticallyModifiedMicroorganisms,
        Biological_Toxin,
        Unspecified(u16),
    }

    impl From<u16> for MunitionDescriptorWarhead {
        fn from(value: u16) -> Self {
            match value {
                0u16 => MunitionDescriptorWarhead::Other,
                10u16 => MunitionDescriptorWarhead::Cargo_VariableSubmunitions_,
                20u16 => MunitionDescriptorWarhead::FuelAirExplosive,
                30u16 => MunitionDescriptorWarhead::GlassBeads,
                31u16 => MunitionDescriptorWarhead::_1um_31,
                32u16 => MunitionDescriptorWarhead::_5um_32,
                33u16 => MunitionDescriptorWarhead::_10um_33,
                1000u16 => MunitionDescriptorWarhead::HighExplosive_HE_,
                1100u16 => MunitionDescriptorWarhead::HE_Plastic,
                1200u16 => MunitionDescriptorWarhead::HE_Incendiary,
                1300u16 => MunitionDescriptorWarhead::HE_Fragmentation,
                1400u16 => MunitionDescriptorWarhead::HE_AntiTank,
                1500u16 => MunitionDescriptorWarhead::HE_Bomblets,
                1600u16 => MunitionDescriptorWarhead::HE_ShapedCharge,
                1610u16 => MunitionDescriptorWarhead::HE_ContinuousRod,
                1615u16 => MunitionDescriptorWarhead::HE_TungstenBall,
                1620u16 => MunitionDescriptorWarhead::HE_BlastFragmentation,
                1625u16 => MunitionDescriptorWarhead::HE_SteerableDartswithHE,
                1630u16 => MunitionDescriptorWarhead::HE_Darts,
                1635u16 => MunitionDescriptorWarhead::HE_Flechettes,
                1640u16 => MunitionDescriptorWarhead::HE_DirectedFragmentation,
                1645u16 => MunitionDescriptorWarhead::HE_SemiArmorPiercing_SAP_,
                1650u16 => MunitionDescriptorWarhead::HE_ShapedChargeFragmentation,
                1655u16 => MunitionDescriptorWarhead::HE_SemiArmorPiercing_Fragmentation,
                1660u16 => MunitionDescriptorWarhead::HE_HollowCharge,
                1665u16 => MunitionDescriptorWarhead::HE_DoubleHollowCharge,
                1670u16 => MunitionDescriptorWarhead::HE_GeneralPurpose,
                1675u16 => MunitionDescriptorWarhead::HE_BlastPenetrator,
                1680u16 => MunitionDescriptorWarhead::HE_RodPenetrator,
                1685u16 => MunitionDescriptorWarhead::HE_AntiPersonnel,
                1690u16 => MunitionDescriptorWarhead::HE_ShapedCharge_Fragmentation_Incendiary,
                1695u16 => MunitionDescriptorWarhead::HE_Penetrator_Blast_Fragmentation,
                2000u16 => MunitionDescriptorWarhead::Smoke,
                2005u16 => MunitionDescriptorWarhead::WP_WhitePhosphorus_,
                2010u16 => MunitionDescriptorWarhead::FOGO_FogOil_,
                2015u16 => MunitionDescriptorWarhead::HC_HexaChloroEthane_,
                3000u16 => MunitionDescriptorWarhead::Illumination,
                4000u16 => MunitionDescriptorWarhead::Practice,
                4001u16 => MunitionDescriptorWarhead::Blank,
                4002u16 => MunitionDescriptorWarhead::Dummy,
                5000u16 => MunitionDescriptorWarhead::Kinetic,
                6000u16 => MunitionDescriptorWarhead::Mines,
                7000u16 => MunitionDescriptorWarhead::Nuclear,
                7010u16 => MunitionDescriptorWarhead::Nuclear_IMT,
                8000u16 => MunitionDescriptorWarhead::Chemical_General,
                8100u16 => MunitionDescriptorWarhead::Chemical_BlisterAgent,
                8110u16 => MunitionDescriptorWarhead::HD_Mustard_,
                8115u16 => MunitionDescriptorWarhead::ThickenedHD_Mustard_,
                8120u16 => MunitionDescriptorWarhead::DustyHD_Mustard_,
                8125u16 => MunitionDescriptorWarhead::L_Lewisite_,
                8130u16 => MunitionDescriptorWarhead::HN3_NitrogenMustard_,
                8135u16 => MunitionDescriptorWarhead::HL_MustardLewisite_,
                8140u16 => MunitionDescriptorWarhead::CX_PhosgeneOxime_,
                8145u16 => MunitionDescriptorWarhead::DMMP_PhosphateDimethylHydrogen_,
                8150u16 => MunitionDescriptorWarhead::DMHP_Phosphite_,
                8155u16 => MunitionDescriptorWarhead::DMA_DimethylAcrylate_,
                8160u16 => MunitionDescriptorWarhead::DEM,
                8165u16 => MunitionDescriptorWarhead::PX_Pxlene_,
                8200u16 => MunitionDescriptorWarhead::Chemical_BloodAgent,
                8210u16 => MunitionDescriptorWarhead::AC_HCN_,
                8215u16 => MunitionDescriptorWarhead::CK_CNCI_,
                8220u16 => MunitionDescriptorWarhead::CG_Phosgene_,
                8300u16 => MunitionDescriptorWarhead::Chemical_NerveAgent,
                8310u16 => MunitionDescriptorWarhead::VX,
                8315u16 => MunitionDescriptorWarhead::ThickenedVX,
                8320u16 => MunitionDescriptorWarhead::DustyVX,
                8325u16 => MunitionDescriptorWarhead::GA_Tabun_,
                8330u16 => MunitionDescriptorWarhead::ThickenedGA_Tabun_,
                8335u16 => MunitionDescriptorWarhead::DustyGA_Tabun_,
                8340u16 => MunitionDescriptorWarhead::GB_Sarin_,
                8345u16 => MunitionDescriptorWarhead::ThickenedGB_Sarin_,
                8350u16 => MunitionDescriptorWarhead::DustyGB_Sarin_,
                8355u16 => MunitionDescriptorWarhead::GD_Soman_,
                8360u16 => MunitionDescriptorWarhead::ThickenedGD_Soman_,
                8365u16 => MunitionDescriptorWarhead::DustyGD_Soman_,
                8370u16 => MunitionDescriptorWarhead::GF,
                8375u16 => MunitionDescriptorWarhead::ThickenedGF,
                8380u16 => MunitionDescriptorWarhead::DustyGF,
                8385u16 => MunitionDescriptorWarhead::SVX_SovietVX_,
                8410u16 => MunitionDescriptorWarhead::BIS,
                8415u16 => MunitionDescriptorWarhead::TCP,
                8425u16 => MunitionDescriptorWarhead::MS_MethylSalicylate_,
                8430u16 => MunitionDescriptorWarhead::TEP,
                8445u16 => MunitionDescriptorWarhead::H2O_Water_,
                8450u16 => MunitionDescriptorWarhead::TO1_ToxicOrganic1_,
                8455u16 => MunitionDescriptorWarhead::TO2_ToxicOrganic2_,
                8460u16 => MunitionDescriptorWarhead::TO3_ToxicOrganic3_,
                8465u16 => MunitionDescriptorWarhead::SulfurHexafluoride,
                8470u16 => MunitionDescriptorWarhead::AA_AceticAcid_,
                8475u16 => MunitionDescriptorWarhead::HF_HydrofluoricAcid_,
                9000u16 => MunitionDescriptorWarhead::Biological,
                9100u16 => MunitionDescriptorWarhead::Biological_Virus,
                9200u16 => MunitionDescriptorWarhead::Biological_Bacteria,
                9300u16 => MunitionDescriptorWarhead::Biological_Rickettsia,
                9400u16 => MunitionDescriptorWarhead::Biological_GeneticallyModifiedMicroorganisms,
                9500u16 => MunitionDescriptorWarhead::Biological_Toxin,
                unspecified_value => MunitionDescriptorWarhead::Unspecified(unspecified_value)
            }
        }
    }

    impl From<MunitionDescriptorWarhead> for u16 {
        fn from(value: MunitionDescriptorWarhead) -> Self {
            match value {
                MunitionDescriptorWarhead::Other => 0u16,
                MunitionDescriptorWarhead::Cargo_VariableSubmunitions_ => 10u16,
                MunitionDescriptorWarhead::FuelAirExplosive => 20u16,
                MunitionDescriptorWarhead::GlassBeads => 30u16,
                MunitionDescriptorWarhead::_1um_31 => 31u16,
                MunitionDescriptorWarhead::_5um_32 => 32u16,
                MunitionDescriptorWarhead::_10um_33 => 33u16,
                MunitionDescriptorWarhead::HighExplosive_HE_ => 1000u16,
                MunitionDescriptorWarhead::HE_Plastic => 1100u16,
                MunitionDescriptorWarhead::HE_Incendiary => 1200u16,
                MunitionDescriptorWarhead::HE_Fragmentation => 1300u16,
                MunitionDescriptorWarhead::HE_AntiTank => 1400u16,
                MunitionDescriptorWarhead::HE_Bomblets => 1500u16,
                MunitionDescriptorWarhead::HE_ShapedCharge => 1600u16,
                MunitionDescriptorWarhead::HE_ContinuousRod => 1610u16,
                MunitionDescriptorWarhead::HE_TungstenBall => 1615u16,
                MunitionDescriptorWarhead::HE_BlastFragmentation => 1620u16,
                MunitionDescriptorWarhead::HE_SteerableDartswithHE => 1625u16,
                MunitionDescriptorWarhead::HE_Darts => 1630u16,
                MunitionDescriptorWarhead::HE_Flechettes => 1635u16,
                MunitionDescriptorWarhead::HE_DirectedFragmentation => 1640u16,
                MunitionDescriptorWarhead::HE_SemiArmorPiercing_SAP_ => 1645u16,
                MunitionDescriptorWarhead::HE_ShapedChargeFragmentation => 1650u16,
                MunitionDescriptorWarhead::HE_SemiArmorPiercing_Fragmentation => 1655u16,
                MunitionDescriptorWarhead::HE_HollowCharge => 1660u16,
                MunitionDescriptorWarhead::HE_DoubleHollowCharge => 1665u16,
                MunitionDescriptorWarhead::HE_GeneralPurpose => 1670u16,
                MunitionDescriptorWarhead::HE_BlastPenetrator => 1675u16,
                MunitionDescriptorWarhead::HE_RodPenetrator => 1680u16,
                MunitionDescriptorWarhead::HE_AntiPersonnel => 1685u16,
                MunitionDescriptorWarhead::HE_ShapedCharge_Fragmentation_Incendiary => 1690u16,
                MunitionDescriptorWarhead::HE_Penetrator_Blast_Fragmentation => 1695u16,
                MunitionDescriptorWarhead::Smoke => 2000u16,
                MunitionDescriptorWarhead::WP_WhitePhosphorus_ => 2005u16,
                MunitionDescriptorWarhead::FOGO_FogOil_ => 2010u16,
                MunitionDescriptorWarhead::HC_HexaChloroEthane_ => 2015u16,
                MunitionDescriptorWarhead::Illumination => 3000u16,
                MunitionDescriptorWarhead::Practice => 4000u16,
                MunitionDescriptorWarhead::Blank => 4001u16,
                MunitionDescriptorWarhead::Dummy => 4002u16,
                MunitionDescriptorWarhead::Kinetic => 5000u16,
                MunitionDescriptorWarhead::Mines => 6000u16,
                MunitionDescriptorWarhead::Nuclear => 7000u16,
                MunitionDescriptorWarhead::Nuclear_IMT => 7010u16,
                MunitionDescriptorWarhead::Chemical_General => 8000u16,
                MunitionDescriptorWarhead::Chemical_BlisterAgent => 8100u16,
                MunitionDescriptorWarhead::HD_Mustard_ => 8110u16,
                MunitionDescriptorWarhead::ThickenedHD_Mustard_ => 8115u16,
                MunitionDescriptorWarhead::DustyHD_Mustard_ => 8120u16,
                MunitionDescriptorWarhead::L_Lewisite_ => 8125u16,
                MunitionDescriptorWarhead::HN3_NitrogenMustard_ => 8130u16,
                MunitionDescriptorWarhead::HL_MustardLewisite_ => 8135u16,
                MunitionDescriptorWarhead::CX_PhosgeneOxime_ => 8140u16,
                MunitionDescriptorWarhead::DMMP_PhosphateDimethylHydrogen_ => 8145u16,
                MunitionDescriptorWarhead::DMHP_Phosphite_ => 8150u16,
                MunitionDescriptorWarhead::DMA_DimethylAcrylate_ => 8155u16,
                MunitionDescriptorWarhead::DEM => 8160u16,
                MunitionDescriptorWarhead::PX_Pxlene_ => 8165u16,
                MunitionDescriptorWarhead::Chemical_BloodAgent => 8200u16,
                MunitionDescriptorWarhead::AC_HCN_ => 8210u16,
                MunitionDescriptorWarhead::CK_CNCI_ => 8215u16,
                MunitionDescriptorWarhead::CG_Phosgene_ => 8220u16,
                MunitionDescriptorWarhead::Chemical_NerveAgent => 8300u16,
                MunitionDescriptorWarhead::VX => 8310u16,
                MunitionDescriptorWarhead::ThickenedVX => 8315u16,
                MunitionDescriptorWarhead::DustyVX => 8320u16,
                MunitionDescriptorWarhead::GA_Tabun_ => 8325u16,
                MunitionDescriptorWarhead::ThickenedGA_Tabun_ => 8330u16,
                MunitionDescriptorWarhead::DustyGA_Tabun_ => 8335u16,
                MunitionDescriptorWarhead::GB_Sarin_ => 8340u16,
                MunitionDescriptorWarhead::ThickenedGB_Sarin_ => 8345u16,
                MunitionDescriptorWarhead::DustyGB_Sarin_ => 8350u16,
                MunitionDescriptorWarhead::GD_Soman_ => 8355u16,
                MunitionDescriptorWarhead::ThickenedGD_Soman_ => 8360u16,
                MunitionDescriptorWarhead::DustyGD_Soman_ => 8365u16,
                MunitionDescriptorWarhead::GF => 8370u16,
                MunitionDescriptorWarhead::ThickenedGF => 8375u16,
                MunitionDescriptorWarhead::DustyGF => 8380u16,
                MunitionDescriptorWarhead::SVX_SovietVX_ => 8385u16,
                MunitionDescriptorWarhead::BIS => 8410u16,
                MunitionDescriptorWarhead::TCP => 8415u16,
                MunitionDescriptorWarhead::MS_MethylSalicylate_ => 8425u16,
                MunitionDescriptorWarhead::TEP => 8430u16,
                MunitionDescriptorWarhead::H2O_Water_ => 8445u16,
                MunitionDescriptorWarhead::TO1_ToxicOrganic1_ => 8450u16,
                MunitionDescriptorWarhead::TO2_ToxicOrganic2_ => 8455u16,
                MunitionDescriptorWarhead::TO3_ToxicOrganic3_ => 8460u16,
                MunitionDescriptorWarhead::SulfurHexafluoride => 8465u16,
                MunitionDescriptorWarhead::AA_AceticAcid_ => 8470u16,
                MunitionDescriptorWarhead::HF_HydrofluoricAcid_ => 8475u16,
                MunitionDescriptorWarhead::Biological => 9000u16,
                MunitionDescriptorWarhead::Biological_Virus => 9100u16,
                MunitionDescriptorWarhead::Biological_Bacteria => 9200u16,
                MunitionDescriptorWarhead::Biological_Rickettsia => 9300u16,
                MunitionDescriptorWarhead::Biological_GeneticallyModifiedMicroorganisms => 9400u16,
                MunitionDescriptorWarhead::Biological_Toxin => 9500u16,
                MunitionDescriptorWarhead::Unspecified(unspecified_value) => unspecified_value
            }
        }
    }

    impl Display for MunitionDescriptorWarhead {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            match self {
                MunitionDescriptorWarhead::Other => write!(f, "{}", "Other"),
                MunitionDescriptorWarhead::Cargo_VariableSubmunitions_ => write!(f, "{}", "Cargo (Variable Submunitions)"),
                MunitionDescriptorWarhead::FuelAirExplosive => write!(f, "{}", "Fuel/Air Explosive"),
                MunitionDescriptorWarhead::GlassBeads => write!(f, "{}", "Glass Beads"),
                MunitionDescriptorWarhead::_1um_31 => write!(f, "{}", "1 um"),
                MunitionDescriptorWarhead::_5um_32 => write!(f, "{}", "5 um"),
                MunitionDescriptorWarhead::_10um_33 => write!(f, "{}", "10 um"),
                MunitionDescriptorWarhead::HighExplosive_HE_ => write!(f, "{}", "High Explosive (HE)"),
                MunitionDescriptorWarhead::HE_Plastic => write!(f, "{}", "HE, Plastic"),
                MunitionDescriptorWarhead::HE_Incendiary => write!(f, "{}", "HE, Incendiary"),
                MunitionDescriptorWarhead::HE_Fragmentation => write!(f, "{}", "HE, Fragmentation"),
                MunitionDescriptorWarhead::HE_AntiTank => write!(f, "{}", "HE, Anti-Tank"),
                MunitionDescriptorWarhead::HE_Bomblets => write!(f, "{}", "HE, Bomblets"),
                MunitionDescriptorWarhead::HE_ShapedCharge => write!(f, "{}", "HE, Shaped Charge"),
                MunitionDescriptorWarhead::HE_ContinuousRod => write!(f, "{}", "HE, Continuous Rod"),
                MunitionDescriptorWarhead::HE_TungstenBall => write!(f, "{}", "HE, Tungsten Ball"),
                MunitionDescriptorWarhead::HE_BlastFragmentation => write!(f, "{}", "HE, Blast Fragmentation"),
                MunitionDescriptorWarhead::HE_SteerableDartswithHE => write!(f, "{}", "HE, Steerable Darts with HE"),
                MunitionDescriptorWarhead::HE_Darts => write!(f, "{}", "HE, Darts"),
                MunitionDescriptorWarhead::HE_Flechettes => write!(f, "{}", "HE, Flechettes"),
                MunitionDescriptorWarhead::HE_DirectedFragmentation => write!(f, "{}", "HE, Directed Fragmentation"),
                MunitionDescriptorWarhead::HE_SemiArmorPiercing_SAP_ => write!(f, "{}", "HE, Semi-Armor Piercing (SAP)"),
                MunitionDescriptorWarhead::HE_ShapedChargeFragmentation => write!(f, "{}", "HE, Shaped Charge Fragmentation"),
                MunitionDescriptorWarhead::HE_SemiArmorPiercing_Fragmentation => write!(f, "{}", "HE, Semi-Armor Piercing, Fragmentation"),
                MunitionDescriptorWarhead::HE_HollowCharge => write!(f, "{}", "HE, Hollow Charge"),
                MunitionDescriptorWarhead::HE_DoubleHollowCharge => write!(f, "{}", "HE, Double Hollow Charge"),
                MunitionDescriptorWarhead::HE_GeneralPurpose => write!(f, "{}", "HE, General Purpose"),
                MunitionDescriptorWarhead::HE_BlastPenetrator => write!(f, "{}", "HE, Blast Penetrator"),
                MunitionDescriptorWarhead::HE_RodPenetrator => write!(f, "{}", "HE, Rod Penetrator"),
                MunitionDescriptorWarhead::HE_AntiPersonnel => write!(f, "{}", "HE, Anti-Personnel"),
                MunitionDescriptorWarhead::HE_ShapedCharge_Fragmentation_Incendiary => write!(f, "{}", "HE, Shaped Charge, Fragmentation, Incendiary"),
                MunitionDescriptorWarhead::HE_Penetrator_Blast_Fragmentation => write!(f, "{}", "HE, Penetrator, Blast, Fragmentation"),
                MunitionDescriptorWarhead::Smoke => write!(f, "{}", "Smoke"),
                MunitionDescriptorWarhead::WP_WhitePhosphorus_ => write!(f, "{}", "WP (White Phosphorus)"),
                MunitionDescriptorWarhead::FOGO_FogOil_ => write!(f, "{}", "FOGO (Fog Oil)"),
                MunitionDescriptorWarhead::HC_HexaChloroEthane_ => write!(f, "{}", "HC (HexaChloroEthane)"),
                MunitionDescriptorWarhead::Illumination => write!(f, "{}", "Illumination"),
                MunitionDescriptorWarhead::Practice => write!(f, "{}", "Practice"),
                MunitionDescriptorWarhead::Blank => write!(f, "{}", "Blank"),
                MunitionDescriptorWarhead::Dummy => write!(f, "{}", "Dummy"),
                MunitionDescriptorWarhead::Kinetic => write!(f, "{}", "Kinetic"),
                MunitionDescriptorWarhead::Mines => write!(f, "{}", "Mines"),
                MunitionDescriptorWarhead::Nuclear => write!(f, "{}", "Nuclear"),
                MunitionDescriptorWarhead::Nuclear_IMT => write!(f, "{}", "Nuclear, IMT"),
                MunitionDescriptorWarhead::Chemical_General => write!(f, "{}", "Chemical, General"),
                MunitionDescriptorWarhead::Chemical_BlisterAgent => write!(f, "{}", "Chemical, Blister Agent"),
                MunitionDescriptorWarhead::HD_Mustard_ => write!(f, "{}", "HD (Mustard)"),
                MunitionDescriptorWarhead::ThickenedHD_Mustard_ => write!(f, "{}", "Thickened HD (Mustard)"),
                MunitionDescriptorWarhead::DustyHD_Mustard_ => write!(f, "{}", "Dusty HD (Mustard)"),
                MunitionDescriptorWarhead::L_Lewisite_ => write!(f, "{}", "L (Lewisite)"),
                MunitionDescriptorWarhead::HN3_NitrogenMustard_ => write!(f, "{}", "HN3 (Nitrogen Mustard)"),
                MunitionDescriptorWarhead::HL_MustardLewisite_ => write!(f, "{}", "HL (Mustard/Lewisite)"),
                MunitionDescriptorWarhead::CX_PhosgeneOxime_ => write!(f, "{}", "CX (Phosgene Oxime)"),
                MunitionDescriptorWarhead::DMMP_PhosphateDimethylHydrogen_ => write!(f, "{}", "DMMP (Phosphate Dimethyl Hydrogen)"),
                MunitionDescriptorWarhead::DMHP_Phosphite_ => write!(f, "{}", "DMHP (Phosphite)"),
                MunitionDescriptorWarhead::DMA_DimethylAcrylate_ => write!(f, "{}", "DMA (Dimethyl Acrylate)"),
                MunitionDescriptorWarhead::DEM => write!(f, "{}", "DEM"),
                MunitionDescriptorWarhead::PX_Pxlene_ => write!(f, "{}", "PX (P-xlene)"),
                MunitionDescriptorWarhead::Chemical_BloodAgent => write!(f, "{}", "Chemical, Blood Agent"),
                MunitionDescriptorWarhead::AC_HCN_ => write!(f, "{}", "AC (HCN)"),
                MunitionDescriptorWarhead::CK_CNCI_ => write!(f, "{}", "CK (CNCI)"),
                MunitionDescriptorWarhead::CG_Phosgene_ => write!(f, "{}", "CG (Phosgene)"),
                MunitionDescriptorWarhead::Chemical_NerveAgent => write!(f, "{}", "Chemical, Nerve Agent"),
                MunitionDescriptorWarhead::VX => write!(f, "{}", "VX"),
                MunitionDescriptorWarhead::ThickenedVX => write!(f, "{}", "Thickened VX"),
                MunitionDescriptorWarhead::DustyVX => write!(f, "{}", "Dusty VX"),
                MunitionDescriptorWarhead::GA_Tabun_ => write!(f, "{}", "GA (Tabun)"),
                MunitionDescriptorWarhead::ThickenedGA_Tabun_ => write!(f, "{}", "Thickened GA (Tabun)"),
                MunitionDescriptorWarhead::DustyGA_Tabun_ => write!(f, "{}", "Dusty GA (Tabun)"),
                MunitionDescriptorWarhead::GB_Sarin_ => write!(f, "{}", "GB (Sarin)"),
                MunitionDescriptorWarhead::ThickenedGB_Sarin_ => write!(f, "{}", "Thickened GB (Sarin)"),
                MunitionDescriptorWarhead::DustyGB_Sarin_ => write!(f, "{}", "Dusty GB (Sarin)"),
                MunitionDescriptorWarhead::GD_Soman_ => write!(f, "{}", "GD (Soman)"),
                MunitionDescriptorWarhead::ThickenedGD_Soman_ => write!(f, "{}", "Thickened GD (Soman)"),
                MunitionDescriptorWarhead::DustyGD_Soman_ => write!(f, "{}", "Dusty GD (Soman)"),
                MunitionDescriptorWarhead::GF => write!(f, "{}", "GF"),
                MunitionDescriptorWarhead::ThickenedGF => write!(f, "{}", "Thickened GF"),
                MunitionDescriptorWarhead::DustyGF => write!(f, "{}", "Dusty GF"),
                MunitionDescriptorWarhead::SVX_SovietVX_ => write!(f, "{}", "SVX (Soviet VX)"),
                MunitionDescriptorWarhead::BIS => write!(f, "{}", "BIS"),
                MunitionDescriptorWarhead::TCP => write!(f, "{}", "TCP"),
                MunitionDescriptorWarhead::MS_MethylSalicylate_ => write!(f, "{}", "MS (Methyl Salicylate)"),
                MunitionDescriptorWarhead::TEP => write!(f, "{}", "TEP"),
                MunitionDescriptorWarhead::H2O_Water_ => write!(f, "{}", "H2O (Water)"),
                MunitionDescriptorWarhead::TO1_ToxicOrganic1_ => write!(f, "{}", "TO1 (Toxic Organic 1)"),
                MunitionDescriptorWarhead::TO2_ToxicOrganic2_ => write!(f, "{}", "TO2 (Toxic Organic 2)"),
                MunitionDescriptorWarhead::TO3_ToxicOrganic3_ => write!(f, "{}", "TO3 (Toxic Organic 3)"),
                MunitionDescriptorWarhead::SulfurHexafluoride => write!(f, "{}", "Sulfur Hexafluoride"),
                MunitionDescriptorWarhead::AA_AceticAcid_ => write!(f, "{}", "AA (Acetic Acid)"),
                MunitionDescriptorWarhead::HF_HydrofluoricAcid_ => write!(f, "{}", "HF (Hydrofluoric Acid)"),
                MunitionDescriptorWarhead::Biological => write!(f, "{}", "Biological"),
                MunitionDescriptorWarhead::Biological_Virus => write!(f, "{}", "Biological, Virus"),
                MunitionDescriptorWarhead::Biological_Bacteria => write!(f, "{}", "Biological, Bacteria"),
                MunitionDescriptorWarhead::Biological_Rickettsia => write!(f, "{}", "Biological, Rickettsia"),
                MunitionDescriptorWarhead::Biological_GeneticallyModifiedMicroorganisms => write!(f, "{}", "Biological, Genetically Modified Micro-organisms"),
                MunitionDescriptorWarhead::Biological_Toxin => write!(f, "{}", "Biological, Toxin"),
                MunitionDescriptorWarhead::Unspecified(unspecified_value) => write!(f, "Unspecified ({})", unspecified_value)
            }
        }
    }

    impl Default for MunitionDescriptorWarhead { fn default() -> Self { MunitionDescriptorWarhead::from(0) } }

    #[derive(Copy, Clone, Debug, PartialEq)]
    #[allow(non_camel_case_types)]
    pub enum MunitionDescriptorFuse {
        Other,
        IntelligentInfluence,
        Sensor,
        Selfdestruct,
        UltraQuick,
        Body,
        DeepIntrusion,
        Multifunction,
        PointDetonation_PD_,
        BaseDetonation_BD_,
        Contact,
        Contact_Instant_Impact_,
        Contact_Delayed,
        _10msDelay_1201,
        _20msDelay_1202,
        _50msDelay_1205,
        _60msDelay_1206,
        _100msDelay_1210,
        _125msDelay_1212,
        _250msDelay_1225,
        _5msDelay_1250,
        _15msDelay_1251,
        _25msDelay_1252,
        _30msDelay_1253,
        _35msDelay_1254,
        _40msDelay_1255,
        _45msDelay_1256,
        _90msDelay_1257,
        _120msDelay_1258,
        _180msDelay_1259,
        _240msDelay_1260,
        Contact_Electronic_ObliqueContact_,
        Contact_Graze,
        Contact_Crush,
        Contact_Hydrostatic,
        Contact_Mechanical,
        Contact_Chemical,
        Contact_Piezoelectric,
        Contact_PointInitiating,
        Contact_PointInitiating_BaseDetonating,
        Contact_BaseDetonating,
        Contact_BallisticCapandBase,
        Contact_Base,
        Contact_Nose,
        Contact_FittedinStandoffProbe,
        Contact_Nonaligned,
        Timed,
        Timed_Programmable,
        Timed_Burnout,
        Timed_Pyrotechnic,
        Timed_Electronic,
        Timed_BaseDelay,
        Timed_ReinforcedNoseImpactDelay,
        Timed_ShortDelayImpact,
        _10msDelay_2701,
        _20msDelay_2702,
        _50msDelay_2705,
        _60msDelay_2706,
        _100msDelay_2710,
        _125msDelay_2712,
        _250msDelay_2725,
        Timed_NoseMountedVariableDelay,
        Timed_LongDelaySide,
        Timed_SelectableDelay,
        Timed_Impact,
        Timed_Sequence,
        Proximity,
        Proximity_ActiveLaser,
        Proximity_Magnetic_Magpolarity_,
        Proximity_ActiveRadar_DopplerRadar_,
        Proximity_RadioFrequency_RF_,
        Proximity_Programmable,
        Proximity_Programmable_Prefragmented,
        Proximity_Infrared,
        Command,
        Command_Electronic_RemotelySet,
        Altitude,
        Altitude_RadioAltimeter,
        Altitude_AirBurst,
        Depth,
        Acoustic,
        Pressure,
        Pressure_Delay,
        Inert,
        Dummy,
        Practice,
        PlugRepresenting,
        Training,
        Pyrotechnic,
        Pyrotechnic_Delay,
        Electrooptical,
        Electromechanical,
        Electromechanical_Nose,
        Strikerless,
        Strikerless_NoseImpact,
        Strikerless_CompressionIgnition,
        CompressionIgnition,
        CompressionIgnition_Strikerless_NoseImpact,
        Percussion,
        Percussion_Instantaneous,
        Electronic,
        Electronic_InternallyMounted,
        Electronic_RangeSetting,
        Electronic_Programmed,
        Mechanical,
        Mechanical_Nose,
        Mechanical_Tail,
        Unspecified(u16),
    }

    impl From<u16> for MunitionDescriptorFuse {
        fn from(value: u16) -> Self {
            match value {
                0u16 => MunitionDescriptorFuse::Other,
                10u16 => MunitionDescriptorFuse::IntelligentInfluence,
                20u16 => MunitionDescriptorFuse::Sensor,
                30u16 => MunitionDescriptorFuse::Selfdestruct,
                40u16 => MunitionDescriptorFuse::UltraQuick,
                50u16 => MunitionDescriptorFuse::Body,
                60u16 => MunitionDescriptorFuse::DeepIntrusion,
                100u16 => MunitionDescriptorFuse::Multifunction,
                200u16 => MunitionDescriptorFuse::PointDetonation_PD_,
                300u16 => MunitionDescriptorFuse::BaseDetonation_BD_,
                1000u16 => MunitionDescriptorFuse::Contact,
                1100u16 => MunitionDescriptorFuse::Contact_Instant_Impact_,
                1200u16 => MunitionDescriptorFuse::Contact_Delayed,
                1201u16 => MunitionDescriptorFuse::_10msDelay_1201,
                1202u16 => MunitionDescriptorFuse::_20msDelay_1202,
                1205u16 => MunitionDescriptorFuse::_50msDelay_1205,
                1206u16 => MunitionDescriptorFuse::_60msDelay_1206,
                1210u16 => MunitionDescriptorFuse::_100msDelay_1210,
                1212u16 => MunitionDescriptorFuse::_125msDelay_1212,
                1225u16 => MunitionDescriptorFuse::_250msDelay_1225,
                1250u16 => MunitionDescriptorFuse::_5msDelay_1250,
                1251u16 => MunitionDescriptorFuse::_15msDelay_1251,
                1252u16 => MunitionDescriptorFuse::_25msDelay_1252,
                1253u16 => MunitionDescriptorFuse::_30msDelay_1253,
                1254u16 => MunitionDescriptorFuse::_35msDelay_1254,
                1255u16 => MunitionDescriptorFuse::_40msDelay_1255,
                1256u16 => MunitionDescriptorFuse::_45msDelay_1256,
                1257u16 => MunitionDescriptorFuse::_90msDelay_1257,
                1258u16 => MunitionDescriptorFuse::_120msDelay_1258,
                1259u16 => MunitionDescriptorFuse::_180msDelay_1259,
                1260u16 => MunitionDescriptorFuse::_240msDelay_1260,
                1300u16 => MunitionDescriptorFuse::Contact_Electronic_ObliqueContact_,
                1400u16 => MunitionDescriptorFuse::Contact_Graze,
                1500u16 => MunitionDescriptorFuse::Contact_Crush,
                1600u16 => MunitionDescriptorFuse::Contact_Hydrostatic,
                1700u16 => MunitionDescriptorFuse::Contact_Mechanical,
                1800u16 => MunitionDescriptorFuse::Contact_Chemical,
                1900u16 => MunitionDescriptorFuse::Contact_Piezoelectric,
                1910u16 => MunitionDescriptorFuse::Contact_PointInitiating,
                1920u16 => MunitionDescriptorFuse::Contact_PointInitiating_BaseDetonating,
                1930u16 => MunitionDescriptorFuse::Contact_BaseDetonating,
                1940u16 => MunitionDescriptorFuse::Contact_BallisticCapandBase,
                1950u16 => MunitionDescriptorFuse::Contact_Base,
                1960u16 => MunitionDescriptorFuse::Contact_Nose,
                1970u16 => MunitionDescriptorFuse::Contact_FittedinStandoffProbe,
                1980u16 => MunitionDescriptorFuse::Contact_Nonaligned,
                2000u16 => MunitionDescriptorFuse::Timed,
                2100u16 => MunitionDescriptorFuse::Timed_Programmable,
                2200u16 => MunitionDescriptorFuse::Timed_Burnout,
                2300u16 => MunitionDescriptorFuse::Timed_Pyrotechnic,
                2400u16 => MunitionDescriptorFuse::Timed_Electronic,
                2500u16 => MunitionDescriptorFuse::Timed_BaseDelay,
                2600u16 => MunitionDescriptorFuse::Timed_ReinforcedNoseImpactDelay,
                2700u16 => MunitionDescriptorFuse::Timed_ShortDelayImpact,
                2701u16 => MunitionDescriptorFuse::_10msDelay_2701,
                2702u16 => MunitionDescriptorFuse::_20msDelay_2702,
                2705u16 => MunitionDescriptorFuse::_50msDelay_2705,
                2706u16 => MunitionDescriptorFuse::_60msDelay_2706,
                2710u16 => MunitionDescriptorFuse::_100msDelay_2710,
                2712u16 => MunitionDescriptorFuse::_125msDelay_2712,
                2725u16 => MunitionDescriptorFuse::_250msDelay_2725,
                2800u16 => MunitionDescriptorFuse::Timed_NoseMountedVariableDelay,
                2900u16 => MunitionDescriptorFuse::Timed_LongDelaySide,
                2910u16 => MunitionDescriptorFuse::Timed_SelectableDelay,
                2920u16 => MunitionDescriptorFuse::Timed_Impact,
                2930u16 => MunitionDescriptorFuse::Timed_Sequence,
                3000u16 => MunitionDescriptorFuse::Proximity,
                3100u16 => MunitionDescriptorFuse::Proximity_ActiveLaser,
                3200u16 => MunitionDescriptorFuse::Proximity_Magnetic_Magpolarity_,
                3300u16 => MunitionDescriptorFuse::Proximity_ActiveRadar_DopplerRadar_,
                3400u16 => MunitionDescriptorFuse::Proximity_RadioFrequency_RF_,
                3500u16 => MunitionDescriptorFuse::Proximity_Programmable,
                3600u16 => MunitionDescriptorFuse::Proximity_Programmable_Prefragmented,
                3700u16 => MunitionDescriptorFuse::Proximity_Infrared,
                4000u16 => MunitionDescriptorFuse::Command,
                4100u16 => MunitionDescriptorFuse::Command_Electronic_RemotelySet,
                5000u16 => MunitionDescriptorFuse::Altitude,
                5100u16 => MunitionDescriptorFuse::Altitude_RadioAltimeter,
                5200u16 => MunitionDescriptorFuse::Altitude_AirBurst,
                6000u16 => MunitionDescriptorFuse::Depth,
                7000u16 => MunitionDescriptorFuse::Acoustic,
                8000u16 => MunitionDescriptorFuse::Pressure,
                8010u16 => MunitionDescriptorFuse::Pressure_Delay,
                8100u16 => MunitionDescriptorFuse::Inert,
                8110u16 => MunitionDescriptorFuse::Dummy,
                8120u16 => MunitionDescriptorFuse::Practice,
                8130u16 => MunitionDescriptorFuse::PlugRepresenting,
                8150u16 => MunitionDescriptorFuse::Training,
                9000u16 => MunitionDescriptorFuse::Pyrotechnic,
                9010u16 => MunitionDescriptorFuse::Pyrotechnic_Delay,
                9100u16 => MunitionDescriptorFuse::Electrooptical,
                9110u16 => MunitionDescriptorFuse::Electromechanical,
                9120u16 => MunitionDescriptorFuse::Electromechanical_Nose,
                9200u16 => MunitionDescriptorFuse::Strikerless,
                9210u16 => MunitionDescriptorFuse::Strikerless_NoseImpact,
                9220u16 => MunitionDescriptorFuse::Strikerless_CompressionIgnition,
                9300u16 => MunitionDescriptorFuse::CompressionIgnition,
                9310u16 => MunitionDescriptorFuse::CompressionIgnition_Strikerless_NoseImpact,
                9400u16 => MunitionDescriptorFuse::Percussion,
                9410u16 => MunitionDescriptorFuse::Percussion_Instantaneous,
                9500u16 => MunitionDescriptorFuse::Electronic,
                9510u16 => MunitionDescriptorFuse::Electronic_InternallyMounted,
                9520u16 => MunitionDescriptorFuse::Electronic_RangeSetting,
                9530u16 => MunitionDescriptorFuse::Electronic_Programmed,
                9600u16 => MunitionDescriptorFuse::Mechanical,
                9610u16 => MunitionDescriptorFuse::Mechanical_Nose,
                9620u16 => MunitionDescriptorFuse::Mechanical_Tail,
                unspecified_value => MunitionDescriptorFuse::Unspecified(unspecified_value)
            }
        }
    }

    impl From<MunitionDescriptorFuse> for u16 {
        fn from(value: MunitionDescriptorFuse) -> Self {
            match value {
                MunitionDescriptorFuse::Other => 0u16,
                MunitionDescriptorFuse::IntelligentInfluence => 10u16,
                MunitionDescriptorFuse::Sensor => 20u16,
                MunitionDescriptorFuse::Selfdestruct => 30u16,
                MunitionDescriptorFuse::UltraQuick => 40u16,
                MunitionDescriptorFuse::Body => 50u16,
                MunitionDescriptorFuse::DeepIntrusion => 60u16,
                MunitionDescriptorFuse::Multifunction => 100u16,
                MunitionDescriptorFuse::PointDetonation_PD_ => 200u16,
                MunitionDescriptorFuse::BaseDetonation_BD_ => 300u16,
                MunitionDescriptorFuse::Contact => 1000u16,
                MunitionDescriptorFuse::Contact_Instant_Impact_ => 1100u16,
                MunitionDescriptorFuse::Contact_Delayed => 1200u16,
                MunitionDescriptorFuse::_10msDelay_1201 => 1201u16,
                MunitionDescriptorFuse::_20msDelay_1202 => 1202u16,
                MunitionDescriptorFuse::_50msDelay_1205 => 1205u16,
                MunitionDescriptorFuse::_60msDelay_1206 => 1206u16,
                MunitionDescriptorFuse::_100msDelay_1210 => 1210u16,
                MunitionDescriptorFuse::_125msDelay_1212 => 1212u16,
                MunitionDescriptorFuse::_250msDelay_1225 => 1225u16,
                MunitionDescriptorFuse::_5msDelay_1250 => 1250u16,
                MunitionDescriptorFuse::_15msDelay_1251 => 1251u16,
                MunitionDescriptorFuse::_25msDelay_1252 => 1252u16,
                MunitionDescriptorFuse::_30msDelay_1253 => 1253u16,
                MunitionDescriptorFuse::_35msDelay_1254 => 1254u16,
                MunitionDescriptorFuse::_40msDelay_1255 => 1255u16,
                MunitionDescriptorFuse::_45msDelay_1256 => 1256u16,
                MunitionDescriptorFuse::_90msDelay_1257 => 1257u16,
                MunitionDescriptorFuse::_120msDelay_1258 => 1258u16,
                MunitionDescriptorFuse::_180msDelay_1259 => 1259u16,
                MunitionDescriptorFuse::_240msDelay_1260 => 1260u16,
                MunitionDescriptorFuse::Contact_Electronic_ObliqueContact_ => 1300u16,
                MunitionDescriptorFuse::Contact_Graze => 1400u16,
                MunitionDescriptorFuse::Contact_Crush => 1500u16,
                MunitionDescriptorFuse::Contact_Hydrostatic => 1600u16,
                MunitionDescriptorFuse::Contact_Mechanical => 1700u16,
                MunitionDescriptorFuse::Contact_Chemical => 1800u16,
                MunitionDescriptorFuse::Contact_Piezoelectric => 1900u16,
                MunitionDescriptorFuse::Contact_PointInitiating => 1910u16,
                MunitionDescriptorFuse::Contact_PointInitiating_BaseDetonating => 1920u16,
                MunitionDescriptorFuse::Contact_BaseDetonating => 1930u16,
                MunitionDescriptorFuse::Contact_BallisticCapandBase => 1940u16,
                MunitionDescriptorFuse::Contact_Base => 1950u16,
                MunitionDescriptorFuse::Contact_Nose => 1960u16,
                MunitionDescriptorFuse::Contact_FittedinStandoffProbe => 1970u16,
                MunitionDescriptorFuse::Contact_Nonaligned => 1980u16,
                MunitionDescriptorFuse::Timed => 2000u16,
                MunitionDescriptorFuse::Timed_Programmable => 2100u16,
                MunitionDescriptorFuse::Timed_Burnout => 2200u16,
                MunitionDescriptorFuse::Timed_Pyrotechnic => 2300u16,
                MunitionDescriptorFuse::Timed_Electronic => 2400u16,
                MunitionDescriptorFuse::Timed_BaseDelay => 2500u16,
                MunitionDescriptorFuse::Timed_ReinforcedNoseImpactDelay => 2600u16,
                MunitionDescriptorFuse::Timed_ShortDelayImpact => 2700u16,
                MunitionDescriptorFuse::_10msDelay_2701 => 2701u16,
                MunitionDescriptorFuse::_20msDelay_2702 => 2702u16,
                MunitionDescriptorFuse::_50msDelay_2705 => 2705u16,
                MunitionDescriptorFuse::_60msDelay_2706 => 2706u16,
                MunitionDescriptorFuse::_100msDelay_2710 => 2710u16,
                MunitionDescriptorFuse::_125msDelay_2712 => 2712u16,
                MunitionDescriptorFuse::_250msDelay_2725 => 2725u16,
                MunitionDescriptorFuse::Timed_NoseMountedVariableDelay => 2800u16,
                MunitionDescriptorFuse::Timed_LongDelaySide => 2900u16,
                MunitionDescriptorFuse::Timed_SelectableDelay => 2910u16,
                MunitionDescriptorFuse::Timed_Impact => 2920u16,
                MunitionDescriptorFuse::Timed_Sequence => 2930u16,
                MunitionDescriptorFuse::Proximity => 3000u16,
                MunitionDescriptorFuse::Proximity_ActiveLaser => 3100u16,
                MunitionDescriptorFuse::Proximity_Magnetic_Magpolarity_ => 3200u16,
                MunitionDescriptorFuse::Proximity_ActiveRadar_DopplerRadar_ => 3300u16,
                MunitionDescriptorFuse::Proximity_RadioFrequency_RF_ => 3400u16,
                MunitionDescriptorFuse::Proximity_Programmable => 3500u16,
                MunitionDescriptorFuse::Proximity_Programmable_Prefragmented => 3600u16,
                MunitionDescriptorFuse::Proximity_Infrared => 3700u16,
                MunitionDescriptorFuse::Command => 4000u16,
                MunitionDescriptorFuse::Command_Electronic_RemotelySet => 4100u16,
                MunitionDescriptorFuse::Altitude => 5000u16,
                MunitionDescriptorFuse::Altitude_RadioAltimeter => 5100u16,
                MunitionDescriptorFuse::Altitude_AirBurst => 5200u16,
                MunitionDescriptorFuse::Depth => 6000u16,
                MunitionDescriptorFuse::Acoustic => 7000u16,
                MunitionDescriptorFuse::Pressure => 8000u16,
                MunitionDescriptorFuse::Pressure_Delay => 8010u16,
                MunitionDescriptorFuse::Inert => 8100u16,
                MunitionDescriptorFuse::Dummy => 8110u16,
                MunitionDescriptorFuse::Practice => 8120u16,
                MunitionDescriptorFuse::PlugRepresenting => 8130u16,
                MunitionDescriptorFuse::Training => 8150u16,
                MunitionDescriptorFuse::Pyrotechnic => 9000u16,
                MunitionDescriptorFuse::Pyrotechnic_Delay => 9010u16,
                MunitionDescriptorFuse::Electrooptical => 9100u16,
                MunitionDescriptorFuse::Electromechanical => 9110u16,
                MunitionDescriptorFuse::Electromechanical_Nose => 9120u16,
                MunitionDescriptorFuse::Strikerless => 9200u16,
                MunitionDescriptorFuse::Strikerless_NoseImpact => 9210u16,
                MunitionDescriptorFuse::Strikerless_CompressionIgnition => 9220u16,
                MunitionDescriptorFuse::CompressionIgnition => 9300u16,
                MunitionDescriptorFuse::CompressionIgnition_Strikerless_NoseImpact => 9310u16,
                MunitionDescriptorFuse::Percussion => 9400u16,
                MunitionDescriptorFuse::Percussion_Instantaneous => 9410u16,
                MunitionDescriptorFuse::Electronic => 9500u16,
                MunitionDescriptorFuse::Electronic_InternallyMounted => 9510u16,
                MunitionDescriptorFuse::Electronic_RangeSetting => 9520u16,
                MunitionDescriptorFuse::Electronic_Programmed => 9530u16,
                MunitionDescriptorFuse::Mechanical => 9600u16,
                MunitionDescriptorFuse::Mechanical_Nose => 9610u16,
                MunitionDescriptorFuse::Mechanical_Tail => 9620u16,
                MunitionDescriptorFuse::Unspecified(unspecified_value) => unspecified_value
            }
        }
    }

    impl Display for MunitionDescriptorFuse {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            match self {
                MunitionDescriptorFuse::Other => write!(f, "{}", "Other"),
                MunitionDescriptorFuse::IntelligentInfluence => write!(f, "{}", "Intelligent Influence"),
                MunitionDescriptorFuse::Sensor => write!(f, "{}", "Sensor"),
                MunitionDescriptorFuse::Selfdestruct => write!(f, "{}", "Self-destruct"),
                MunitionDescriptorFuse::UltraQuick => write!(f, "{}", "Ultra Quick"),
                MunitionDescriptorFuse::Body => write!(f, "{}", "Body"),
                MunitionDescriptorFuse::DeepIntrusion => write!(f, "{}", "Deep Intrusion"),
                MunitionDescriptorFuse::Multifunction => write!(f, "{}", "Multifunction"),
                MunitionDescriptorFuse::PointDetonation_PD_ => write!(f, "{}", "Point Detonation (PD)"),
                MunitionDescriptorFuse::BaseDetonation_BD_ => write!(f, "{}", "Base Detonation (BD)"),
                MunitionDescriptorFuse::Contact => write!(f, "{}", "Contact"),
                MunitionDescriptorFuse::Contact_Instant_Impact_ => write!(f, "{}", "Contact, Instant (Impact)"),
                MunitionDescriptorFuse::Contact_Delayed => write!(f, "{}", "Contact, Delayed"),
                MunitionDescriptorFuse::_10msDelay_1201 => write!(f, "{}", "10 ms Delay"),
                MunitionDescriptorFuse::_20msDelay_1202 => write!(f, "{}", "20 ms Delay"),
                MunitionDescriptorFuse::_50msDelay_1205 => write!(f, "{}", "50 ms Delay"),
                MunitionDescriptorFuse::_60msDelay_1206 => write!(f, "{}", "60 ms Delay"),
                MunitionDescriptorFuse::_100msDelay_1210 => write!(f, "{}", "100 ms Delay"),
                MunitionDescriptorFuse::_125msDelay_1212 => write!(f, "{}", "125 ms Delay"),
                MunitionDescriptorFuse::_250msDelay_1225 => write!(f, "{}", "250 ms Delay"),
                MunitionDescriptorFuse::_5msDelay_1250 => write!(f, "{}", "5 ms Delay"),
                MunitionDescriptorFuse::_15msDelay_1251 => write!(f, "{}", "15 ms Delay"),
                MunitionDescriptorFuse::_25msDelay_1252 => write!(f, "{}", "25 ms Delay"),
                MunitionDescriptorFuse::_30msDelay_1253 => write!(f, "{}", "30 ms Delay"),
                MunitionDescriptorFuse::_35msDelay_1254 => write!(f, "{}", "35 ms Delay"),
                MunitionDescriptorFuse::_40msDelay_1255 => write!(f, "{}", "40 ms Delay"),
                MunitionDescriptorFuse::_45msDelay_1256 => write!(f, "{}", "45 ms Delay"),
                MunitionDescriptorFuse::_90msDelay_1257 => write!(f, "{}", "90 ms Delay"),
                MunitionDescriptorFuse::_120msDelay_1258 => write!(f, "{}", "120 ms Delay"),
                MunitionDescriptorFuse::_180msDelay_1259 => write!(f, "{}", "180 ms Delay"),
                MunitionDescriptorFuse::_240msDelay_1260 => write!(f, "{}", "240 ms Delay"),
                MunitionDescriptorFuse::Contact_Electronic_ObliqueContact_ => write!(f, "{}", "Contact, Electronic (Oblique Contact)"),
                MunitionDescriptorFuse::Contact_Graze => write!(f, "{}", "Contact, Graze"),
                MunitionDescriptorFuse::Contact_Crush => write!(f, "{}", "Contact, Crush"),
                MunitionDescriptorFuse::Contact_Hydrostatic => write!(f, "{}", "Contact, Hydrostatic"),
                MunitionDescriptorFuse::Contact_Mechanical => write!(f, "{}", "Contact, Mechanical"),
                MunitionDescriptorFuse::Contact_Chemical => write!(f, "{}", "Contact, Chemical"),
                MunitionDescriptorFuse::Contact_Piezoelectric => write!(f, "{}", "Contact, Piezoelectric"),
                MunitionDescriptorFuse::Contact_PointInitiating => write!(f, "{}", "Contact, Point Initiating"),
                MunitionDescriptorFuse::Contact_PointInitiating_BaseDetonating => write!(f, "{}", "Contact, Point Initiating, Base Detonating"),
                MunitionDescriptorFuse::Contact_BaseDetonating => write!(f, "{}", "Contact, Base Detonating"),
                MunitionDescriptorFuse::Contact_BallisticCapandBase => write!(f, "{}", "Contact, Ballistic Cap and Base"),
                MunitionDescriptorFuse::Contact_Base => write!(f, "{}", "Contact, Base"),
                MunitionDescriptorFuse::Contact_Nose => write!(f, "{}", "Contact, Nose"),
                MunitionDescriptorFuse::Contact_FittedinStandoffProbe => write!(f, "{}", "Contact, Fitted in Standoff Probe"),
                MunitionDescriptorFuse::Contact_Nonaligned => write!(f, "{}", "Contact, Non-aligned"),
                MunitionDescriptorFuse::Timed => write!(f, "{}", "Timed"),
                MunitionDescriptorFuse::Timed_Programmable => write!(f, "{}", "Timed, Programmable"),
                MunitionDescriptorFuse::Timed_Burnout => write!(f, "{}", "Timed, Burnout"),
                MunitionDescriptorFuse::Timed_Pyrotechnic => write!(f, "{}", "Timed, Pyrotechnic"),
                MunitionDescriptorFuse::Timed_Electronic => write!(f, "{}", "Timed, Electronic"),
                MunitionDescriptorFuse::Timed_BaseDelay => write!(f, "{}", "Timed, Base Delay"),
                MunitionDescriptorFuse::Timed_ReinforcedNoseImpactDelay => write!(f, "{}", "Timed, Reinforced Nose Impact Delay"),
                MunitionDescriptorFuse::Timed_ShortDelayImpact => write!(f, "{}", "Timed, Short Delay Impact"),
                MunitionDescriptorFuse::_10msDelay_2701 => write!(f, "{}", "10 ms Delay"),
                MunitionDescriptorFuse::_20msDelay_2702 => write!(f, "{}", "20 ms Delay"),
                MunitionDescriptorFuse::_50msDelay_2705 => write!(f, "{}", "50 ms Delay"),
                MunitionDescriptorFuse::_60msDelay_2706 => write!(f, "{}", "60 ms Delay"),
                MunitionDescriptorFuse::_100msDelay_2710 => write!(f, "{}", "100 ms Delay"),
                MunitionDescriptorFuse::_125msDelay_2712 => write!(f, "{}", "125 ms Delay"),
                MunitionDescriptorFuse::_250msDelay_2725 => write!(f, "{}", "250 ms Delay"),
                MunitionDescriptorFuse::Timed_NoseMountedVariableDelay => write!(f, "{}", "Timed, Nose Mounted Variable Delay"),
                MunitionDescriptorFuse::Timed_LongDelaySide => write!(f, "{}", "Timed, Long Delay Side"),
                MunitionDescriptorFuse::Timed_SelectableDelay => write!(f, "{}", "Timed, Selectable Delay"),
                MunitionDescriptorFuse::Timed_Impact => write!(f, "{}", "Timed, Impact"),
                MunitionDescriptorFuse::Timed_Sequence => write!(f, "{}", "Timed, Sequence"),
                MunitionDescriptorFuse::Proximity => write!(f, "{}", "Proximity"),
                MunitionDescriptorFuse::Proximity_ActiveLaser => write!(f, "{}", "Proximity, Active Laser"),
                MunitionDescriptorFuse::Proximity_Magnetic_Magpolarity_ => write!(f, "{}", "Proximity, Magnetic (Magpolarity)"),
                MunitionDescriptorFuse::Proximity_ActiveRadar_DopplerRadar_ => write!(f, "{}", "Proximity, Active Radar (Doppler Radar)"),
                MunitionDescriptorFuse::Proximity_RadioFrequency_RF_ => write!(f, "{}", "Proximity, Radio Frequency (RF)"),
                MunitionDescriptorFuse::Proximity_Programmable => write!(f, "{}", "Proximity, Programmable"),
                MunitionDescriptorFuse::Proximity_Programmable_Prefragmented => write!(f, "{}", "Proximity, Programmable, Prefragmented"),
                MunitionDescriptorFuse::Proximity_Infrared => write!(f, "{}", "Proximity, Infrared"),
                MunitionDescriptorFuse::Command => write!(f, "{}", "Command"),
                MunitionDescriptorFuse::Command_Electronic_RemotelySet => write!(f, "{}", "Command, Electronic, Remotely Set"),
                MunitionDescriptorFuse::Altitude => write!(f, "{}", "Altitude"),
                MunitionDescriptorFuse::Altitude_RadioAltimeter => write!(f, "{}", "Altitude, Radio Altimeter"),
                MunitionDescriptorFuse::Altitude_AirBurst => write!(f, "{}", "Altitude, Air Burst"),
                MunitionDescriptorFuse::Depth => write!(f, "{}", "Depth"),
                MunitionDescriptorFuse::Acoustic => write!(f, "{}", "Acoustic"),
                MunitionDescriptorFuse::Pressure => write!(f, "{}", "Pressure"),
                MunitionDescriptorFuse::Pressure_Delay => write!(f, "{}", "Pressure, Delay"),
                MunitionDescriptorFuse::Inert => write!(f, "{}", "Inert"),
                MunitionDescriptorFuse::Dummy => write!(f, "{}", "Dummy"),
                MunitionDescriptorFuse::Practice => write!(f, "{}", "Practice"),
                MunitionDescriptorFuse::PlugRepresenting => write!(f, "{}", "Plug Representing"),
                MunitionDescriptorFuse::Training => write!(f, "{}", "Training"),
                MunitionDescriptorFuse::Pyrotechnic => write!(f, "{}", "Pyrotechnic"),
                MunitionDescriptorFuse::Pyrotechnic_Delay => write!(f, "{}", "Pyrotechnic, Delay"),
                MunitionDescriptorFuse::Electrooptical => write!(f, "{}", "Electro-optical"),
                MunitionDescriptorFuse::Electromechanical => write!(f, "{}", "Electromechanical"),
                MunitionDescriptorFuse::Electromechanical_Nose => write!(f, "{}", "Electromechanical, Nose"),
                MunitionDescriptorFuse::Strikerless => write!(f, "{}", "Strikerless"),
                MunitionDescriptorFuse::Strikerless_NoseImpact => write!(f, "{}", "Strikerless, Nose Impact"),
                MunitionDescriptorFuse::Strikerless_CompressionIgnition => write!(f, "{}", "Strikerless, Compression-Ignition"),
                MunitionDescriptorFuse::CompressionIgnition => write!(f, "{}", "Compression-Ignition"),
                MunitionDescriptorFuse::CompressionIgnition_Strikerless_NoseImpact => write!(f, "{}", "Compression-Ignition, Strikerless, Nose Impact"),
                MunitionDescriptorFuse::Percussion => write!(f, "{}", "Percussion"),
                MunitionDescriptorFuse::Percussion_Instantaneous => write!(f, "{}", "Percussion, Instantaneous"),
                MunitionDescriptorFuse::Electronic => write!(f, "{}", "Electronic"),
                MunitionDescriptorFuse::Electronic_InternallyMounted => write!(f, "{}", "Electronic, Internally Mounted"),
                MunitionDescriptorFuse::Electronic_RangeSetting => write!(f, "{}", "Electronic, Range Setting"),
                MunitionDescriptorFuse::Electronic_Programmed => write!(f, "{}", "Electronic, Programmed"),
                MunitionDescriptorFuse::Mechanical => write!(f, "{}", "Mechanical"),
                MunitionDescriptorFuse::Mechanical_Nose => write!(f, "{}", "Mechanical, Nose"),
                MunitionDescriptorFuse::Mechanical_Tail => write!(f, "{}", "Mechanical, Tail"),
                MunitionDescriptorFuse::Unspecified(unspecified_value) => write!(f, "Unspecified ({})", unspecified_value)
            }
        }
    }

    impl Default for MunitionDescriptorFuse { fn default() -> Self { MunitionDescriptorFuse::from(0) } }
}