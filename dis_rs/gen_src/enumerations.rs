pub mod enumerations {
    use std::fmt::{Display, Formatter};

    #[derive(Copy, Clone, Debug, PartialEq)]
    pub enum ForceID { Other = 0, Friendly = 1, Opposing = 2, Neutral = 3, Friendly2 = 4, Opposing2 = 5, Neutral2 = 6, Friendly3 = 7, Opposing3 = 8, Neutral3 = 9, Friendly4 = 10, Opposing4 = 11, Neutral4 = 12, Friendly5 = 13, Opposing5 = 14, Neutral5 = 15, Friendly6 = 16, Opposing6 = 17, Neutral6 = 18, Friendly7 = 19, Opposing7 = 20, Neutral7 = 21, Friendly8 = 22, Opposing8 = 23, Neutral8 = 24, Friendly9 = 25, Opposing9 = 26, Neutral9 = 27, Friendly10 = 28, Opposing10 = 29, Neutral10 = 30 }

    impl From<u8> for ForceID {
        fn from(value: u8) -> Self {
            match value {
                0u8 => ForceID::Other,
                1u8 => ForceID::Friendly,
                2u8 => ForceID::Opposing,
                3u8 => ForceID::Neutral,
                4u8 => ForceID::Friendly2,
                5u8 => ForceID::Opposing2,
                6u8 => ForceID::Neutral2,
                7u8 => ForceID::Friendly3,
                8u8 => ForceID::Opposing3,
                9u8 => ForceID::Neutral3,
                10u8 => ForceID::Friendly4,
                11u8 => ForceID::Opposing4,
                12u8 => ForceID::Neutral4,
                13u8 => ForceID::Friendly5,
                14u8 => ForceID::Opposing5,
                15u8 => ForceID::Neutral5,
                16u8 => ForceID::Friendly6,
                17u8 => ForceID::Opposing6,
                18u8 => ForceID::Neutral6,
                19u8 => ForceID::Friendly7,
                20u8 => ForceID::Opposing7,
                21u8 => ForceID::Neutral7,
                22u8 => ForceID::Friendly8,
                23u8 => ForceID::Opposing8,
                24u8 => ForceID::Neutral8,
                25u8 => ForceID::Friendly9,
                26u8 => ForceID::Opposing9,
                27u8 => ForceID::Neutral9,
                28u8 => ForceID::Friendly10,
                29u8 => ForceID::Opposing10,
                30u8 => ForceID::Neutral10,
                _unspecified_value => ForceID::default()
            }
        }
    }

    impl From<ForceID> for u8 {
        fn from(value: ForceID) -> Self {
            match value {
                ForceID::Other => 0u8,
                ForceID::Friendly => 1u8,
                ForceID::Opposing => 2u8,
                ForceID::Neutral => 3u8,
                ForceID::Friendly2 => 4u8,
                ForceID::Opposing2 => 5u8,
                ForceID::Neutral2 => 6u8,
                ForceID::Friendly3 => 7u8,
                ForceID::Opposing3 => 8u8,
                ForceID::Neutral3 => 9u8,
                ForceID::Friendly4 => 10u8,
                ForceID::Opposing4 => 11u8,
                ForceID::Neutral4 => 12u8,
                ForceID::Friendly5 => 13u8,
                ForceID::Opposing5 => 14u8,
                ForceID::Neutral5 => 15u8,
                ForceID::Friendly6 => 16u8,
                ForceID::Opposing6 => 17u8,
                ForceID::Neutral6 => 18u8,
                ForceID::Friendly7 => 19u8,
                ForceID::Opposing7 => 20u8,
                ForceID::Neutral7 => 21u8,
                ForceID::Friendly8 => 22u8,
                ForceID::Opposing8 => 23u8,
                ForceID::Neutral8 => 24u8,
                ForceID::Friendly9 => 25u8,
                ForceID::Opposing9 => 26u8,
                ForceID::Neutral9 => 27u8,
                ForceID::Friendly10 => 28u8,
                ForceID::Opposing10 => 29u8,
                ForceID::Neutral10 => 30u8
            }
        }
    }

    impl Display for ForceID {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            match self {
                ForceID::Other => write!(f, "{}", "Other"),
                ForceID::Friendly => write!(f, "{}", "Friendly"),
                ForceID::Opposing => write!(f, "{}", "Opposing"),
                ForceID::Neutral => write!(f, "{}", "Neutral"),
                ForceID::Friendly2 => write!(f, "{}", "Friendly 2"),
                ForceID::Opposing2 => write!(f, "{}", "Opposing 2"),
                ForceID::Neutral2 => write!(f, "{}", "Neutral 2"),
                ForceID::Friendly3 => write!(f, "{}", "Friendly 3"),
                ForceID::Opposing3 => write!(f, "{}", "Opposing 3"),
                ForceID::Neutral3 => write!(f, "{}", "Neutral 3"),
                ForceID::Friendly4 => write!(f, "{}", "Friendly 4"),
                ForceID::Opposing4 => write!(f, "{}", "Opposing 4"),
                ForceID::Neutral4 => write!(f, "{}", "Neutral 4"),
                ForceID::Friendly5 => write!(f, "{}", "Friendly 5"),
                ForceID::Opposing5 => write!(f, "{}", "Opposing 5"),
                ForceID::Neutral5 => write!(f, "{}", "Neutral 5"),
                ForceID::Friendly6 => write!(f, "{}", "Friendly 6"),
                ForceID::Opposing6 => write!(f, "{}", "Opposing 6"),
                ForceID::Neutral6 => write!(f, "{}", "Neutral 6"),
                ForceID::Friendly7 => write!(f, "{}", "Friendly 7"),
                ForceID::Opposing7 => write!(f, "{}", "Opposing 7"),
                ForceID::Neutral7 => write!(f, "{}", "Neutral 7"),
                ForceID::Friendly8 => write!(f, "{}", "Friendly 8"),
                ForceID::Opposing8 => write!(f, "{}", "Opposing 8"),
                ForceID::Neutral8 => write!(f, "{}", "Neutral 8"),
                ForceID::Friendly9 => write!(f, "{}", "Friendly 9"),
                ForceID::Opposing9 => write!(f, "{}", "Opposing 9"),
                ForceID::Neutral9 => write!(f, "{}", "Neutral 9"),
                ForceID::Friendly10 => write!(f, "{}", "Friendly 10"),
                ForceID::Opposing10 => write!(f, "{}", "Opposing 10"),
                ForceID::Neutral10 => write!(f, "{}", "Neutral 10")
            }
        }
    }

    impl Default for ForceID { fn default() -> Self { ForceID::from(0) } }

    #[derive(Copy, Clone, Debug, PartialEq)]
    pub enum EntityKind { Other = 0, Platform = 1, Munition = 2, Lifeform = 3, Environmental = 4, Culturalfeature = 5, Supply = 6, Radio = 7, Expendable = 8, SensorEmitter = 9 }

    impl From<u8> for EntityKind {
        fn from(value: u8) -> Self {
            match value {
                0u8 => EntityKind::Other,
                1u8 => EntityKind::Platform,
                2u8 => EntityKind::Munition,
                3u8 => EntityKind::Lifeform,
                4u8 => EntityKind::Environmental,
                5u8 => EntityKind::Culturalfeature,
                6u8 => EntityKind::Supply,
                7u8 => EntityKind::Radio,
                8u8 => EntityKind::Expendable,
                9u8 => EntityKind::SensorEmitter,
                _unspecified_value => EntityKind::default()
            }
        }
    }

    impl From<EntityKind> for u8 {
        fn from(value: EntityKind) -> Self {
            match value {
                EntityKind::Other => 0u8,
                EntityKind::Platform => 1u8,
                EntityKind::Munition => 2u8,
                EntityKind::Lifeform => 3u8,
                EntityKind::Environmental => 4u8,
                EntityKind::Culturalfeature => 5u8,
                EntityKind::Supply => 6u8,
                EntityKind::Radio => 7u8,
                EntityKind::Expendable => 8u8,
                EntityKind::SensorEmitter => 9u8
            }
        }
    }

    impl Display for EntityKind {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            match self {
                EntityKind::Other => write!(f, "{}", "Other"),
                EntityKind::Platform => write!(f, "{}", "Platform"),
                EntityKind::Munition => write!(f, "{}", "Munition"),
                EntityKind::Lifeform => write!(f, "{}", "Life form"),
                EntityKind::Environmental => write!(f, "{}", "Environmental"),
                EntityKind::Culturalfeature => write!(f, "{}", "Cultural feature"),
                EntityKind::Supply => write!(f, "{}", "Supply"),
                EntityKind::Radio => write!(f, "{}", "Radio"),
                EntityKind::Expendable => write!(f, "{}", "Expendable"),
                EntityKind::SensorEmitter => write!(f, "{}", "Sensor/Emitter")
            }
        }
    }

    impl Default for EntityKind { fn default() -> Self { EntityKind::from(0) } }

    #[derive(Copy, Clone, Debug, PartialEq)]
    pub enum EntityMarkingCharacterSet { Unused = 0, ASCII = 1, U_S_ArmyMarking = 2, DigitChevron = 3 }

    impl From<u8> for EntityMarkingCharacterSet {
        fn from(value: u8) -> Self {
            match value {
                0u8 => EntityMarkingCharacterSet::Unused,
                1u8 => EntityMarkingCharacterSet::ASCII,
                2u8 => EntityMarkingCharacterSet::U_S_ArmyMarking,
                3u8 => EntityMarkingCharacterSet::DigitChevron,
                _unspecified_value => EntityMarkingCharacterSet::default()
            }
        }
    }

    impl From<EntityMarkingCharacterSet> for u8 {
        fn from(value: EntityMarkingCharacterSet) -> Self {
            match value {
                EntityMarkingCharacterSet::Unused => 0u8,
                EntityMarkingCharacterSet::ASCII => 1u8,
                EntityMarkingCharacterSet::U_S_ArmyMarking => 2u8,
                EntityMarkingCharacterSet::DigitChevron => 3u8
            }
        }
    }

    impl Display for EntityMarkingCharacterSet {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            match self {
                EntityMarkingCharacterSet::Unused => write!(f, "{}", "Unused"),
                EntityMarkingCharacterSet::ASCII => write!(f, "{}", "ASCII"),
                EntityMarkingCharacterSet::U_S_ArmyMarking => write!(f, "{}", "U.S. Army Marking"),
                EntityMarkingCharacterSet::DigitChevron => write!(f, "{}", "Digit Chevron")
            }
        }
    }

    impl Default for EntityMarkingCharacterSet { fn default() -> Self { EntityMarkingCharacterSet::from(0) } }

    #[derive(Copy, Clone, Debug, PartialEq)]
    pub enum MunitionDescriptorWarhead {
        Other = 0,
        Cargo = 10,
        FuelAirExplosive = 20,
        GlassBeads = 30,
        _1um = 31,
        _5um = 32,
        _10um = 33,
        HighExplosive = 1000,
        HE_Plastic = 1100,
        HE_Incendiary = 1200,
        HE_Fragmentation = 1300,
        HE_AntiTank = 1400,
        HE_Bomblets = 1500,
        HE_ShapedCharge = 1600,
        HE_ContinuousRod = 1610,
        HE_TungstenBall = 1615,
        HE_BlastFragmentation = 1620,
        HE_SteerableDartswithHE = 1625,
        HE_Darts = 1630,
        HE_Flechettes = 1635,
        HE_DirectedFragmentation = 1640,
        HE_SemiArmorPiercing = 1645,
        HE_ShapedChargeFragmentation = 1650,
        HE_SemiArmorPiercing_Fragmentation = 1655,
        HE_HollowCharge = 1660,
        HE_DoubleHollowCharge = 1665,
        HE_GeneralPurpose = 1670,
        HE_BlastPenetrator = 1675,
        HE_RodPenetrator = 1680,
        HE_AntiPersonnel = 1685,
        HE_ShapedCharge_Fragmentation_Incendiary = 1690,
        HE_Penetrator_Blast_Fragmentation = 1695,
        Smoke = 2000,
        WP = 2005,
        FOGO = 2010,
        HC = 2015,
        Illumination = 3000,
        Practice = 4000,
        Blank = 4001,
        Dummy = 4002,
        Kinetic = 5000,
        Mines = 6000,
        Nuclear = 7000,
        Nuclear_IMT = 7010,
        Chemical_General = 8000,
        Chemical_BlisterAgent = 8100,
        HD = 8110,
        ThickenedHD = 8115,
        DustyHD = 8120,
        L = 8125,
        HN3 = 8130,
        HL = 8135,
        CX = 8140,
        DMMP = 8145,
        DMHP = 8150,
        DMA = 8155,
        DEM = 8160,
        PX = 8165,
        Chemical_BloodAgent = 8200,
        AC = 8210,
        CK = 8215,
        CG = 8220,
        Chemical_NerveAgent = 8300,
        VX = 8310,
        ThickenedVX = 8315,
        DustyVX = 8320,
        GA = 8325,
        ThickenedGA = 8330,
        DustyGA = 8335,
        GB = 8340,
        ThickenedGB = 8345,
        DustyGB = 8350,
        GD = 8355,
        ThickenedGD = 8360,
        DustyGD = 8365,
        GF = 8370,
        ThickenedGF = 8375,
        DustyGF = 8380,
        SVX = 8385,
        BIS = 8410,
        TCP = 8415,
        MS = 8425,
        TEP = 8430,
        H2O = 8445,
        TO1 = 8450,
        TO2 = 8455,
        TO3 = 8460,
        SulfurHexafluoride = 8465,
        AA = 8470,
        HF = 8475,
        Biological = 9000,
        Biological_Virus = 9100,
        Biological_Bacteria = 9200,
        Biological_Rickettsia = 9300,
        Biological_GeneticallyModifiedMicroorganisms = 9400,
        Biological_Toxin = 9500,
    }

    impl From<u16> for MunitionDescriptorWarhead {
        fn from(value: u16) -> Self {
            match value {
                0u16 => MunitionDescriptorWarhead::Other,
                10u16 => MunitionDescriptorWarhead::Cargo,
                20u16 => MunitionDescriptorWarhead::FuelAirExplosive,
                30u16 => MunitionDescriptorWarhead::GlassBeads,
                31u16 => MunitionDescriptorWarhead::_1um,
                32u16 => MunitionDescriptorWarhead::_5um,
                33u16 => MunitionDescriptorWarhead::_10um,
                1000u16 => MunitionDescriptorWarhead::HighExplosive,
                1100u16 => MunitionDescriptorWarhead::HE_Plastic,
                1200u16 => MunitionDescriptorWarhead::HE_Incendiary,
                1300u16 => MunitionDescriptorWarhead::HE_Fragmentation,
                1400u16 => MunitionDescriptorWarhead::HE_AntiTank,
                1500u16 => MunitionDescriptorWarhead::HE_Bomblets,
                1600u16 => MunitionDescriptorWarhead::HE_ShapedCharge,
                1610u16 => MunitionDescriptorWarhead::HE_ContinuousRod,
                1615u16 => MunitionDescriptorWarhead::HE_TungstenBall,
                1620u16 => MunitionDescriptorWarhead::HE_BlastFragmentation,
                1625u16 => MunitionDescriptorWarhead::HE_SteerableDartswithHE,
                1630u16 => MunitionDescriptorWarhead::HE_Darts,
                1635u16 => MunitionDescriptorWarhead::HE_Flechettes,
                1640u16 => MunitionDescriptorWarhead::HE_DirectedFragmentation,
                1645u16 => MunitionDescriptorWarhead::HE_SemiArmorPiercing,
                1650u16 => MunitionDescriptorWarhead::HE_ShapedChargeFragmentation,
                1655u16 => MunitionDescriptorWarhead::HE_SemiArmorPiercing_Fragmentation,
                1660u16 => MunitionDescriptorWarhead::HE_HollowCharge,
                1665u16 => MunitionDescriptorWarhead::HE_DoubleHollowCharge,
                1670u16 => MunitionDescriptorWarhead::HE_GeneralPurpose,
                1675u16 => MunitionDescriptorWarhead::HE_BlastPenetrator,
                1680u16 => MunitionDescriptorWarhead::HE_RodPenetrator,
                1685u16 => MunitionDescriptorWarhead::HE_AntiPersonnel,
                1690u16 => MunitionDescriptorWarhead::HE_ShapedCharge_Fragmentation_Incendiary,
                1695u16 => MunitionDescriptorWarhead::HE_Penetrator_Blast_Fragmentation,
                2000u16 => MunitionDescriptorWarhead::Smoke,
                2005u16 => MunitionDescriptorWarhead::WP,
                2010u16 => MunitionDescriptorWarhead::FOGO,
                2015u16 => MunitionDescriptorWarhead::HC,
                3000u16 => MunitionDescriptorWarhead::Illumination,
                4000u16 => MunitionDescriptorWarhead::Practice,
                4001u16 => MunitionDescriptorWarhead::Blank,
                4002u16 => MunitionDescriptorWarhead::Dummy,
                5000u16 => MunitionDescriptorWarhead::Kinetic,
                6000u16 => MunitionDescriptorWarhead::Mines,
                7000u16 => MunitionDescriptorWarhead::Nuclear,
                7010u16 => MunitionDescriptorWarhead::Nuclear_IMT,
                8000u16 => MunitionDescriptorWarhead::Chemical_General,
                8100u16 => MunitionDescriptorWarhead::Chemical_BlisterAgent,
                8110u16 => MunitionDescriptorWarhead::HD,
                8115u16 => MunitionDescriptorWarhead::ThickenedHD,
                8120u16 => MunitionDescriptorWarhead::DustyHD,
                8125u16 => MunitionDescriptorWarhead::L,
                8130u16 => MunitionDescriptorWarhead::HN3,
                8135u16 => MunitionDescriptorWarhead::HL,
                8140u16 => MunitionDescriptorWarhead::CX,
                8145u16 => MunitionDescriptorWarhead::DMMP,
                8150u16 => MunitionDescriptorWarhead::DMHP,
                8155u16 => MunitionDescriptorWarhead::DMA,
                8160u16 => MunitionDescriptorWarhead::DEM,
                8165u16 => MunitionDescriptorWarhead::PX,
                8200u16 => MunitionDescriptorWarhead::Chemical_BloodAgent,
                8210u16 => MunitionDescriptorWarhead::AC,
                8215u16 => MunitionDescriptorWarhead::CK,
                8220u16 => MunitionDescriptorWarhead::CG,
                8300u16 => MunitionDescriptorWarhead::Chemical_NerveAgent,
                8310u16 => MunitionDescriptorWarhead::VX,
                8315u16 => MunitionDescriptorWarhead::ThickenedVX,
                8320u16 => MunitionDescriptorWarhead::DustyVX,
                8325u16 => MunitionDescriptorWarhead::GA,
                8330u16 => MunitionDescriptorWarhead::ThickenedGA,
                8335u16 => MunitionDescriptorWarhead::DustyGA,
                8340u16 => MunitionDescriptorWarhead::GB,
                8345u16 => MunitionDescriptorWarhead::ThickenedGB,
                8350u16 => MunitionDescriptorWarhead::DustyGB,
                8355u16 => MunitionDescriptorWarhead::GD,
                8360u16 => MunitionDescriptorWarhead::ThickenedGD,
                8365u16 => MunitionDescriptorWarhead::DustyGD,
                8370u16 => MunitionDescriptorWarhead::GF,
                8375u16 => MunitionDescriptorWarhead::ThickenedGF,
                8380u16 => MunitionDescriptorWarhead::DustyGF,
                8385u16 => MunitionDescriptorWarhead::SVX,
                8410u16 => MunitionDescriptorWarhead::BIS,
                8415u16 => MunitionDescriptorWarhead::TCP,
                8425u16 => MunitionDescriptorWarhead::MS,
                8430u16 => MunitionDescriptorWarhead::TEP,
                8445u16 => MunitionDescriptorWarhead::H2O,
                8450u16 => MunitionDescriptorWarhead::TO1,
                8455u16 => MunitionDescriptorWarhead::TO2,
                8460u16 => MunitionDescriptorWarhead::TO3,
                8465u16 => MunitionDescriptorWarhead::SulfurHexafluoride,
                8470u16 => MunitionDescriptorWarhead::AA,
                8475u16 => MunitionDescriptorWarhead::HF,
                9000u16 => MunitionDescriptorWarhead::Biological,
                9100u16 => MunitionDescriptorWarhead::Biological_Virus,
                9200u16 => MunitionDescriptorWarhead::Biological_Bacteria,
                9300u16 => MunitionDescriptorWarhead::Biological_Rickettsia,
                9400u16 => MunitionDescriptorWarhead::Biological_GeneticallyModifiedMicroorganisms,
                9500u16 => MunitionDescriptorWarhead::Biological_Toxin,
                _unspecified_value => MunitionDescriptorWarhead::default()
            }
        }
    }

    impl From<MunitionDescriptorWarhead> for u16 {
        fn from(value: MunitionDescriptorWarhead) -> Self {
            match value {
                MunitionDescriptorWarhead::Other => 0u16,
                MunitionDescriptorWarhead::Cargo => 10u16,
                MunitionDescriptorWarhead::FuelAirExplosive => 20u16,
                MunitionDescriptorWarhead::GlassBeads => 30u16,
                MunitionDescriptorWarhead::_1um => 31u16,
                MunitionDescriptorWarhead::_5um => 32u16,
                MunitionDescriptorWarhead::_10um => 33u16,
                MunitionDescriptorWarhead::HighExplosive => 1000u16,
                MunitionDescriptorWarhead::HE_Plastic => 1100u16,
                MunitionDescriptorWarhead::HE_Incendiary => 1200u16,
                MunitionDescriptorWarhead::HE_Fragmentation => 1300u16,
                MunitionDescriptorWarhead::HE_AntiTank => 1400u16,
                MunitionDescriptorWarhead::HE_Bomblets => 1500u16,
                MunitionDescriptorWarhead::HE_ShapedCharge => 1600u16,
                MunitionDescriptorWarhead::HE_ContinuousRod => 1610u16,
                MunitionDescriptorWarhead::HE_TungstenBall => 1615u16,
                MunitionDescriptorWarhead::HE_BlastFragmentation => 1620u16,
                MunitionDescriptorWarhead::HE_SteerableDartswithHE => 1625u16,
                MunitionDescriptorWarhead::HE_Darts => 1630u16,
                MunitionDescriptorWarhead::HE_Flechettes => 1635u16,
                MunitionDescriptorWarhead::HE_DirectedFragmentation => 1640u16,
                MunitionDescriptorWarhead::HE_SemiArmorPiercing => 1645u16,
                MunitionDescriptorWarhead::HE_ShapedChargeFragmentation => 1650u16,
                MunitionDescriptorWarhead::HE_SemiArmorPiercing_Fragmentation => 1655u16,
                MunitionDescriptorWarhead::HE_HollowCharge => 1660u16,
                MunitionDescriptorWarhead::HE_DoubleHollowCharge => 1665u16,
                MunitionDescriptorWarhead::HE_GeneralPurpose => 1670u16,
                MunitionDescriptorWarhead::HE_BlastPenetrator => 1675u16,
                MunitionDescriptorWarhead::HE_RodPenetrator => 1680u16,
                MunitionDescriptorWarhead::HE_AntiPersonnel => 1685u16,
                MunitionDescriptorWarhead::HE_ShapedCharge_Fragmentation_Incendiary => 1690u16,
                MunitionDescriptorWarhead::HE_Penetrator_Blast_Fragmentation => 1695u16,
                MunitionDescriptorWarhead::Smoke => 2000u16,
                MunitionDescriptorWarhead::WP => 2005u16,
                MunitionDescriptorWarhead::FOGO => 2010u16,
                MunitionDescriptorWarhead::HC => 2015u16,
                MunitionDescriptorWarhead::Illumination => 3000u16,
                MunitionDescriptorWarhead::Practice => 4000u16,
                MunitionDescriptorWarhead::Blank => 4001u16,
                MunitionDescriptorWarhead::Dummy => 4002u16,
                MunitionDescriptorWarhead::Kinetic => 5000u16,
                MunitionDescriptorWarhead::Mines => 6000u16,
                MunitionDescriptorWarhead::Nuclear => 7000u16,
                MunitionDescriptorWarhead::Nuclear_IMT => 7010u16,
                MunitionDescriptorWarhead::Chemical_General => 8000u16,
                MunitionDescriptorWarhead::Chemical_BlisterAgent => 8100u16,
                MunitionDescriptorWarhead::HD => 8110u16,
                MunitionDescriptorWarhead::ThickenedHD => 8115u16,
                MunitionDescriptorWarhead::DustyHD => 8120u16,
                MunitionDescriptorWarhead::L => 8125u16,
                MunitionDescriptorWarhead::HN3 => 8130u16,
                MunitionDescriptorWarhead::HL => 8135u16,
                MunitionDescriptorWarhead::CX => 8140u16,
                MunitionDescriptorWarhead::DMMP => 8145u16,
                MunitionDescriptorWarhead::DMHP => 8150u16,
                MunitionDescriptorWarhead::DMA => 8155u16,
                MunitionDescriptorWarhead::DEM => 8160u16,
                MunitionDescriptorWarhead::PX => 8165u16,
                MunitionDescriptorWarhead::Chemical_BloodAgent => 8200u16,
                MunitionDescriptorWarhead::AC => 8210u16,
                MunitionDescriptorWarhead::CK => 8215u16,
                MunitionDescriptorWarhead::CG => 8220u16,
                MunitionDescriptorWarhead::Chemical_NerveAgent => 8300u16,
                MunitionDescriptorWarhead::VX => 8310u16,
                MunitionDescriptorWarhead::ThickenedVX => 8315u16,
                MunitionDescriptorWarhead::DustyVX => 8320u16,
                MunitionDescriptorWarhead::GA => 8325u16,
                MunitionDescriptorWarhead::ThickenedGA => 8330u16,
                MunitionDescriptorWarhead::DustyGA => 8335u16,
                MunitionDescriptorWarhead::GB => 8340u16,
                MunitionDescriptorWarhead::ThickenedGB => 8345u16,
                MunitionDescriptorWarhead::DustyGB => 8350u16,
                MunitionDescriptorWarhead::GD => 8355u16,
                MunitionDescriptorWarhead::ThickenedGD => 8360u16,
                MunitionDescriptorWarhead::DustyGD => 8365u16,
                MunitionDescriptorWarhead::GF => 8370u16,
                MunitionDescriptorWarhead::ThickenedGF => 8375u16,
                MunitionDescriptorWarhead::DustyGF => 8380u16,
                MunitionDescriptorWarhead::SVX => 8385u16,
                MunitionDescriptorWarhead::BIS => 8410u16,
                MunitionDescriptorWarhead::TCP => 8415u16,
                MunitionDescriptorWarhead::MS => 8425u16,
                MunitionDescriptorWarhead::TEP => 8430u16,
                MunitionDescriptorWarhead::H2O => 8445u16,
                MunitionDescriptorWarhead::TO1 => 8450u16,
                MunitionDescriptorWarhead::TO2 => 8455u16,
                MunitionDescriptorWarhead::TO3 => 8460u16,
                MunitionDescriptorWarhead::SulfurHexafluoride => 8465u16,
                MunitionDescriptorWarhead::AA => 8470u16,
                MunitionDescriptorWarhead::HF => 8475u16,
                MunitionDescriptorWarhead::Biological => 9000u16,
                MunitionDescriptorWarhead::Biological_Virus => 9100u16,
                MunitionDescriptorWarhead::Biological_Bacteria => 9200u16,
                MunitionDescriptorWarhead::Biological_Rickettsia => 9300u16,
                MunitionDescriptorWarhead::Biological_GeneticallyModifiedMicroorganisms => 9400u16,
                MunitionDescriptorWarhead::Biological_Toxin => 9500u16
            }
        }
    }

    impl Display for MunitionDescriptorWarhead {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            match self {
                MunitionDescriptorWarhead::Other => write!(f, "{}", "Other"),
                MunitionDescriptorWarhead::Cargo => write!(f, "{}", "Cargo (Variable Submunitions)"),
                MunitionDescriptorWarhead::FuelAirExplosive => write!(f, "{}", "Fuel/Air Explosive"),
                MunitionDescriptorWarhead::GlassBeads => write!(f, "{}", "Glass Beads"),
                MunitionDescriptorWarhead::_1um => write!(f, "{}", "1 um"),
                MunitionDescriptorWarhead::_5um => write!(f, "{}", "5 um"),
                MunitionDescriptorWarhead::_10um => write!(f, "{}", "10 um"),
                MunitionDescriptorWarhead::HighExplosive => write!(f, "{}", "High Explosive (HE)"),
                MunitionDescriptorWarhead::HE_Plastic => write!(f, "{}", "HE, Plastic"),
                MunitionDescriptorWarhead::HE_Incendiary => write!(f, "{}", "HE, Incendiary"),
                MunitionDescriptorWarhead::HE_Fragmentation => write!(f, "{}", "HE, Fragmentation"),
                MunitionDescriptorWarhead::HE_AntiTank => write!(f, "{}", "HE, Anti-Tank"),
                MunitionDescriptorWarhead::HE_Bomblets => write!(f, "{}", "HE, Bomblets"),
                MunitionDescriptorWarhead::HE_ShapedCharge => write!(f, "{}", "HE, Shaped Charge"),
                MunitionDescriptorWarhead::HE_ContinuousRod => write!(f, "{}", "HE, Continuous Rod"),
                MunitionDescriptorWarhead::HE_TungstenBall => write!(f, "{}", "HE, Tungsten Ball"),
                MunitionDescriptorWarhead::HE_BlastFragmentation => write!(f, "{}", "HE, Blast Fragmentation"),
                MunitionDescriptorWarhead::HE_SteerableDartswithHE => write!(f, "{}", "HE, Steerable Darts with HE"),
                MunitionDescriptorWarhead::HE_Darts => write!(f, "{}", "HE, Darts"),
                MunitionDescriptorWarhead::HE_Flechettes => write!(f, "{}", "HE, Flechettes"),
                MunitionDescriptorWarhead::HE_DirectedFragmentation => write!(f, "{}", "HE, Directed Fragmentation"),
                MunitionDescriptorWarhead::HE_SemiArmorPiercing => write!(f, "{}", "HE, Semi-Armor Piercing (SAP)"),
                MunitionDescriptorWarhead::HE_ShapedChargeFragmentation => write!(f, "{}", "HE, Shaped Charge Fragmentation"),
                MunitionDescriptorWarhead::HE_SemiArmorPiercing_Fragmentation => write!(f, "{}", "HE, Semi-Armor Piercing, Fragmentation"),
                MunitionDescriptorWarhead::HE_HollowCharge => write!(f, "{}", "HE, Hollow Charge"),
                MunitionDescriptorWarhead::HE_DoubleHollowCharge => write!(f, "{}", "HE, Double Hollow Charge"),
                MunitionDescriptorWarhead::HE_GeneralPurpose => write!(f, "{}", "HE, General Purpose"),
                MunitionDescriptorWarhead::HE_BlastPenetrator => write!(f, "{}", "HE, Blast Penetrator"),
                MunitionDescriptorWarhead::HE_RodPenetrator => write!(f, "{}", "HE, Rod Penetrator"),
                MunitionDescriptorWarhead::HE_AntiPersonnel => write!(f, "{}", "HE, Anti-Personnel"),
                MunitionDescriptorWarhead::HE_ShapedCharge_Fragmentation_Incendiary => write!(f, "{}", "HE, Shaped Charge, Fragmentation, Incendiary"),
                MunitionDescriptorWarhead::HE_Penetrator_Blast_Fragmentation => write!(f, "{}", "HE, Penetrator, Blast, Fragmentation"),
                MunitionDescriptorWarhead::Smoke => write!(f, "{}", "Smoke"),
                MunitionDescriptorWarhead::WP => write!(f, "{}", "WP (White Phosphorus)"),
                MunitionDescriptorWarhead::FOGO => write!(f, "{}", "FOGO (Fog Oil)"),
                MunitionDescriptorWarhead::HC => write!(f, "{}", "HC (HexaChloroEthane)"),
                MunitionDescriptorWarhead::Illumination => write!(f, "{}", "Illumination"),
                MunitionDescriptorWarhead::Practice => write!(f, "{}", "Practice"),
                MunitionDescriptorWarhead::Blank => write!(f, "{}", "Blank"),
                MunitionDescriptorWarhead::Dummy => write!(f, "{}", "Dummy"),
                MunitionDescriptorWarhead::Kinetic => write!(f, "{}", "Kinetic"),
                MunitionDescriptorWarhead::Mines => write!(f, "{}", "Mines"),
                MunitionDescriptorWarhead::Nuclear => write!(f, "{}", "Nuclear"),
                MunitionDescriptorWarhead::Nuclear_IMT => write!(f, "{}", "Nuclear, IMT"),
                MunitionDescriptorWarhead::Chemical_General => write!(f, "{}", "Chemical, General"),
                MunitionDescriptorWarhead::Chemical_BlisterAgent => write!(f, "{}", "Chemical, Blister Agent"),
                MunitionDescriptorWarhead::HD => write!(f, "{}", "HD (Mustard)"),
                MunitionDescriptorWarhead::ThickenedHD => write!(f, "{}", "Thickened HD (Mustard)"),
                MunitionDescriptorWarhead::DustyHD => write!(f, "{}", "Dusty HD (Mustard)"),
                MunitionDescriptorWarhead::L => write!(f, "{}", "L (Lewisite)"),
                MunitionDescriptorWarhead::HN3 => write!(f, "{}", "HN3 (Nitrogen Mustard)"),
                MunitionDescriptorWarhead::HL => write!(f, "{}", "HL (Mustard/Lewisite)"),
                MunitionDescriptorWarhead::CX => write!(f, "{}", "CX (Phosgene Oxime)"),
                MunitionDescriptorWarhead::DMMP => write!(f, "{}", "DMMP (Phosphate Dimethyl Hydrogen)"),
                MunitionDescriptorWarhead::DMHP => write!(f, "{}", "DMHP (Phosphite)"),
                MunitionDescriptorWarhead::DMA => write!(f, "{}", "DMA (Dimethyl Acrylate)"),
                MunitionDescriptorWarhead::DEM => write!(f, "{}", "DEM"),
                MunitionDescriptorWarhead::PX => write!(f, "{}", "PX (P-xlene)"),
                MunitionDescriptorWarhead::Chemical_BloodAgent => write!(f, "{}", "Chemical, Blood Agent"),
                MunitionDescriptorWarhead::AC => write!(f, "{}", "AC (HCN)"),
                MunitionDescriptorWarhead::CK => write!(f, "{}", "CK (CNCI)"),
                MunitionDescriptorWarhead::CG => write!(f, "{}", "CG (Phosgene)"),
                MunitionDescriptorWarhead::Chemical_NerveAgent => write!(f, "{}", "Chemical, Nerve Agent"),
                MunitionDescriptorWarhead::VX => write!(f, "{}", "VX"),
                MunitionDescriptorWarhead::ThickenedVX => write!(f, "{}", "Thickened VX"),
                MunitionDescriptorWarhead::DustyVX => write!(f, "{}", "Dusty VX"),
                MunitionDescriptorWarhead::GA => write!(f, "{}", "GA (Tabun)"),
                MunitionDescriptorWarhead::ThickenedGA => write!(f, "{}", "Thickened GA (Tabun)"),
                MunitionDescriptorWarhead::DustyGA => write!(f, "{}", "Dusty GA (Tabun)"),
                MunitionDescriptorWarhead::GB => write!(f, "{}", "GB (Sarin)"),
                MunitionDescriptorWarhead::ThickenedGB => write!(f, "{}", "Thickened GB (Sarin)"),
                MunitionDescriptorWarhead::DustyGB => write!(f, "{}", "Dusty GB (Sarin)"),
                MunitionDescriptorWarhead::GD => write!(f, "{}", "GD (Soman)"),
                MunitionDescriptorWarhead::ThickenedGD => write!(f, "{}", "Thickened GD (Soman)"),
                MunitionDescriptorWarhead::DustyGD => write!(f, "{}", "Dusty GD (Soman)"),
                MunitionDescriptorWarhead::GF => write!(f, "{}", "GF"),
                MunitionDescriptorWarhead::ThickenedGF => write!(f, "{}", "Thickened GF"),
                MunitionDescriptorWarhead::DustyGF => write!(f, "{}", "Dusty GF"),
                MunitionDescriptorWarhead::SVX => write!(f, "{}", "SVX (Soviet VX)"),
                MunitionDescriptorWarhead::BIS => write!(f, "{}", "BIS"),
                MunitionDescriptorWarhead::TCP => write!(f, "{}", "TCP"),
                MunitionDescriptorWarhead::MS => write!(f, "{}", "MS (Methyl Salicylate)"),
                MunitionDescriptorWarhead::TEP => write!(f, "{}", "TEP"),
                MunitionDescriptorWarhead::H2O => write!(f, "{}", "H2O (Water)"),
                MunitionDescriptorWarhead::TO1 => write!(f, "{}", "TO1 (Toxic Organic 1)"),
                MunitionDescriptorWarhead::TO2 => write!(f, "{}", "TO2 (Toxic Organic 2)"),
                MunitionDescriptorWarhead::TO3 => write!(f, "{}", "TO3 (Toxic Organic 3)"),
                MunitionDescriptorWarhead::SulfurHexafluoride => write!(f, "{}", "Sulfur Hexafluoride"),
                MunitionDescriptorWarhead::AA => write!(f, "{}", "AA (Acetic Acid)"),
                MunitionDescriptorWarhead::HF => write!(f, "{}", "HF (Hydrofluoric Acid)"),
                MunitionDescriptorWarhead::Biological => write!(f, "{}", "Biological"),
                MunitionDescriptorWarhead::Biological_Virus => write!(f, "{}", "Biological, Virus"),
                MunitionDescriptorWarhead::Biological_Bacteria => write!(f, "{}", "Biological, Bacteria"),
                MunitionDescriptorWarhead::Biological_Rickettsia => write!(f, "{}", "Biological, Rickettsia"),
                MunitionDescriptorWarhead::Biological_GeneticallyModifiedMicroorganisms => write!(f, "{}", "Biological, Genetically Modified Micro-organisms"),
                MunitionDescriptorWarhead::Biological_Toxin => write!(f, "{}", "Biological, Toxin")
            }
        }
    }

    impl Default for MunitionDescriptorWarhead { fn default() -> Self { MunitionDescriptorWarhead::from(0) } }

    #[derive(Copy, Clone, Debug, PartialEq)]
    pub enum MunitionDescriptorFuse {
        Other = 0,
        IntelligentInfluence = 10,
        Sensor = 20,
        Selfdestruct = 30,
        UltraQuick = 40,
        Body = 50,
        DeepIntrusion = 60,
        Multifunction = 100,
        PointDetonation = 200,
        BaseDetonation = 300,
        Contact = 1000,
        Contact_Instant = 1100,
        Contact_Delayed = 1200,
        _10msDelay = 1201,
        _20msDelay = 1202,
        _50msDelay = 1205,
        _60msDelay = 1206,
        _100msDelay = 1210,
        _125msDelay = 1212,
        _250msDelay = 1225,
        _5msDelay = 1250,
        _15msDelay = 1251,
        _25msDelay = 1252,
        _30msDelay = 1253,
        _35msDelay = 1254,
        _40msDelay = 1255,
        _45msDelay = 1256,
        _90msDelay = 1257,
        _120msDelay = 1258,
        _180msDelay = 1259,
        _240msDelay = 1260,
        Contact_Electronic = 1300,
        Contact_Graze = 1400,
        Contact_Crush = 1500,
        Contact_Hydrostatic = 1600,
        Contact_Mechanical = 1700,
        Contact_Chemical = 1800,
        Contact_Piezoelectric = 1900,
        Contact_PointInitiating = 1910,
        Contact_PointInitiating_BaseDetonating = 1920,
        Contact_BaseDetonating = 1930,
        Contact_BallisticCapandBase = 1940,
        Contact_Base = 1950,
        Contact_Nose = 1960,
        Contact_FittedinStandoffProbe = 1970,
        Contact_Nonaligned = 1980,
        Timed = 2000,
        Timed_Programmable = 2100,
        Timed_Burnout = 2200,
        Timed_Pyrotechnic = 2300,
        Timed_Electronic = 2400,
        Timed_BaseDelay = 2500,
        Timed_ReinforcedNoseImpactDelay = 2600,
        Timed_ShortDelayImpact = 2700,
        _10msDelay = 2701,
        _20msDelay = 2702,
        _50msDelay = 2705,
        _60msDelay = 2706,
        _100msDelay = 2710,
        _125msDelay = 2712,
        _250msDelay = 2725,
        Timed_NoseMountedVariableDelay = 2800,
        Timed_LongDelaySide = 2900,
        Timed_SelectableDelay = 2910,
        Timed_Impact = 2920,
        Timed_Sequence = 2930,
        Proximity = 3000,
        Proximity_ActiveLaser = 3100,
        Proximity_Magnetic = 3200,
        Proximity_ActiveRadar = 3300,
        Proximity_RadioFrequency = 3400,
        Proximity_Programmable = 3500,
        Proximity_Programmable_Prefragmented = 3600,
        Proximity_Infrared = 3700,
        Command = 4000,
        Command_Electronic_RemotelySet = 4100,
        Altitude = 5000,
        Altitude_RadioAltimeter = 5100,
        Altitude_AirBurst = 5200,
        Depth = 6000,
        Acoustic = 7000,
        Pressure = 8000,
        Pressure_Delay = 8010,
        Inert = 8100,
        Dummy = 8110,
        Practice = 8120,
        PlugRepresenting = 8130,
        Training = 8150,
        Pyrotechnic = 9000,
        Pyrotechnic_Delay = 9010,
        Electrooptical = 9100,
        Electromechanical = 9110,
        Electromechanical_Nose = 9120,
        Strikerless = 9200,
        Strikerless_NoseImpact = 9210,
        Strikerless_CompressionIgnition = 9220,
        CompressionIgnition = 9300,
        CompressionIgnition_Strikerless_NoseImpact = 9310,
        Percussion = 9400,
        Percussion_Instantaneous = 9410,
        Electronic = 9500,
        Electronic_InternallyMounted = 9510,
        Electronic_RangeSetting = 9520,
        Electronic_Programmed = 9530,
        Mechanical = 9600,
        Mechanical_Nose = 9610,
        Mechanical_Tail = 9620,
    }

    impl From<u16> for MunitionDescriptorFuse {
        fn from(value: u16) -> Self {
            match value {
                0u16 => MunitionDescriptorFuse::Other,
                10u16 => MunitionDescriptorFuse::IntelligentInfluence,
                20u16 => MunitionDescriptorFuse::Sensor,
                30u16 => MunitionDescriptorFuse::Selfdestruct,
                40u16 => MunitionDescriptorFuse::UltraQuick,
                50u16 => MunitionDescriptorFuse::Body,
                60u16 => MunitionDescriptorFuse::DeepIntrusion,
                100u16 => MunitionDescriptorFuse::Multifunction,
                200u16 => MunitionDescriptorFuse::PointDetonation,
                300u16 => MunitionDescriptorFuse::BaseDetonation,
                1000u16 => MunitionDescriptorFuse::Contact,
                1100u16 => MunitionDescriptorFuse::Contact_Instant,
                1200u16 => MunitionDescriptorFuse::Contact_Delayed,
                1201u16 => MunitionDescriptorFuse::_10msDelay,
                1202u16 => MunitionDescriptorFuse::_20msDelay,
                1205u16 => MunitionDescriptorFuse::_50msDelay,
                1206u16 => MunitionDescriptorFuse::_60msDelay,
                1210u16 => MunitionDescriptorFuse::_100msDelay,
                1212u16 => MunitionDescriptorFuse::_125msDelay,
                1225u16 => MunitionDescriptorFuse::_250msDelay,
                1250u16 => MunitionDescriptorFuse::_5msDelay,
                1251u16 => MunitionDescriptorFuse::_15msDelay,
                1252u16 => MunitionDescriptorFuse::_25msDelay,
                1253u16 => MunitionDescriptorFuse::_30msDelay,
                1254u16 => MunitionDescriptorFuse::_35msDelay,
                1255u16 => MunitionDescriptorFuse::_40msDelay,
                1256u16 => MunitionDescriptorFuse::_45msDelay,
                1257u16 => MunitionDescriptorFuse::_90msDelay,
                1258u16 => MunitionDescriptorFuse::_120msDelay,
                1259u16 => MunitionDescriptorFuse::_180msDelay,
                1260u16 => MunitionDescriptorFuse::_240msDelay,
                1300u16 => MunitionDescriptorFuse::Contact_Electronic,
                1400u16 => MunitionDescriptorFuse::Contact_Graze,
                1500u16 => MunitionDescriptorFuse::Contact_Crush,
                1600u16 => MunitionDescriptorFuse::Contact_Hydrostatic,
                1700u16 => MunitionDescriptorFuse::Contact_Mechanical,
                1800u16 => MunitionDescriptorFuse::Contact_Chemical,
                1900u16 => MunitionDescriptorFuse::Contact_Piezoelectric,
                1910u16 => MunitionDescriptorFuse::Contact_PointInitiating,
                1920u16 => MunitionDescriptorFuse::Contact_PointInitiating_BaseDetonating,
                1930u16 => MunitionDescriptorFuse::Contact_BaseDetonating,
                1940u16 => MunitionDescriptorFuse::Contact_BallisticCapandBase,
                1950u16 => MunitionDescriptorFuse::Contact_Base,
                1960u16 => MunitionDescriptorFuse::Contact_Nose,
                1970u16 => MunitionDescriptorFuse::Contact_FittedinStandoffProbe,
                1980u16 => MunitionDescriptorFuse::Contact_Nonaligned,
                2000u16 => MunitionDescriptorFuse::Timed,
                2100u16 => MunitionDescriptorFuse::Timed_Programmable,
                2200u16 => MunitionDescriptorFuse::Timed_Burnout,
                2300u16 => MunitionDescriptorFuse::Timed_Pyrotechnic,
                2400u16 => MunitionDescriptorFuse::Timed_Electronic,
                2500u16 => MunitionDescriptorFuse::Timed_BaseDelay,
                2600u16 => MunitionDescriptorFuse::Timed_ReinforcedNoseImpactDelay,
                2700u16 => MunitionDescriptorFuse::Timed_ShortDelayImpact,
                2701u16 => MunitionDescriptorFuse::_10msDelay,
                2702u16 => MunitionDescriptorFuse::_20msDelay,
                2705u16 => MunitionDescriptorFuse::_50msDelay,
                2706u16 => MunitionDescriptorFuse::_60msDelay,
                2710u16 => MunitionDescriptorFuse::_100msDelay,
                2712u16 => MunitionDescriptorFuse::_125msDelay,
                2725u16 => MunitionDescriptorFuse::_250msDelay,
                2800u16 => MunitionDescriptorFuse::Timed_NoseMountedVariableDelay,
                2900u16 => MunitionDescriptorFuse::Timed_LongDelaySide,
                2910u16 => MunitionDescriptorFuse::Timed_SelectableDelay,
                2920u16 => MunitionDescriptorFuse::Timed_Impact,
                2930u16 => MunitionDescriptorFuse::Timed_Sequence,
                3000u16 => MunitionDescriptorFuse::Proximity,
                3100u16 => MunitionDescriptorFuse::Proximity_ActiveLaser,
                3200u16 => MunitionDescriptorFuse::Proximity_Magnetic,
                3300u16 => MunitionDescriptorFuse::Proximity_ActiveRadar,
                3400u16 => MunitionDescriptorFuse::Proximity_RadioFrequency,
                3500u16 => MunitionDescriptorFuse::Proximity_Programmable,
                3600u16 => MunitionDescriptorFuse::Proximity_Programmable_Prefragmented,
                3700u16 => MunitionDescriptorFuse::Proximity_Infrared,
                4000u16 => MunitionDescriptorFuse::Command,
                4100u16 => MunitionDescriptorFuse::Command_Electronic_RemotelySet,
                5000u16 => MunitionDescriptorFuse::Altitude,
                5100u16 => MunitionDescriptorFuse::Altitude_RadioAltimeter,
                5200u16 => MunitionDescriptorFuse::Altitude_AirBurst,
                6000u16 => MunitionDescriptorFuse::Depth,
                7000u16 => MunitionDescriptorFuse::Acoustic,
                8000u16 => MunitionDescriptorFuse::Pressure,
                8010u16 => MunitionDescriptorFuse::Pressure_Delay,
                8100u16 => MunitionDescriptorFuse::Inert,
                8110u16 => MunitionDescriptorFuse::Dummy,
                8120u16 => MunitionDescriptorFuse::Practice,
                8130u16 => MunitionDescriptorFuse::PlugRepresenting,
                8150u16 => MunitionDescriptorFuse::Training,
                9000u16 => MunitionDescriptorFuse::Pyrotechnic,
                9010u16 => MunitionDescriptorFuse::Pyrotechnic_Delay,
                9100u16 => MunitionDescriptorFuse::Electrooptical,
                9110u16 => MunitionDescriptorFuse::Electromechanical,
                9120u16 => MunitionDescriptorFuse::Electromechanical_Nose,
                9200u16 => MunitionDescriptorFuse::Strikerless,
                9210u16 => MunitionDescriptorFuse::Strikerless_NoseImpact,
                9220u16 => MunitionDescriptorFuse::Strikerless_CompressionIgnition,
                9300u16 => MunitionDescriptorFuse::CompressionIgnition,
                9310u16 => MunitionDescriptorFuse::CompressionIgnition_Strikerless_NoseImpact,
                9400u16 => MunitionDescriptorFuse::Percussion,
                9410u16 => MunitionDescriptorFuse::Percussion_Instantaneous,
                9500u16 => MunitionDescriptorFuse::Electronic,
                9510u16 => MunitionDescriptorFuse::Electronic_InternallyMounted,
                9520u16 => MunitionDescriptorFuse::Electronic_RangeSetting,
                9530u16 => MunitionDescriptorFuse::Electronic_Programmed,
                9600u16 => MunitionDescriptorFuse::Mechanical,
                9610u16 => MunitionDescriptorFuse::Mechanical_Nose,
                9620u16 => MunitionDescriptorFuse::Mechanical_Tail,
                _unspecified_value => MunitionDescriptorFuse::default()
            }
        }
    }

    impl From<MunitionDescriptorFuse> for u16 {
        fn from(value: MunitionDescriptorFuse) -> Self {
            match value {
                MunitionDescriptorFuse::Other => 0u16,
                MunitionDescriptorFuse::IntelligentInfluence => 10u16,
                MunitionDescriptorFuse::Sensor => 20u16,
                MunitionDescriptorFuse::Selfdestruct => 30u16,
                MunitionDescriptorFuse::UltraQuick => 40u16,
                MunitionDescriptorFuse::Body => 50u16,
                MunitionDescriptorFuse::DeepIntrusion => 60u16,
                MunitionDescriptorFuse::Multifunction => 100u16,
                MunitionDescriptorFuse::PointDetonation => 200u16,
                MunitionDescriptorFuse::BaseDetonation => 300u16,
                MunitionDescriptorFuse::Contact => 1000u16,
                MunitionDescriptorFuse::Contact_Instant => 1100u16,
                MunitionDescriptorFuse::Contact_Delayed => 1200u16,
                MunitionDescriptorFuse::_10msDelay => 1201u16,
                MunitionDescriptorFuse::_20msDelay => 1202u16,
                MunitionDescriptorFuse::_50msDelay => 1205u16,
                MunitionDescriptorFuse::_60msDelay => 1206u16,
                MunitionDescriptorFuse::_100msDelay => 1210u16,
                MunitionDescriptorFuse::_125msDelay => 1212u16,
                MunitionDescriptorFuse::_250msDelay => 1225u16,
                MunitionDescriptorFuse::_5msDelay => 1250u16,
                MunitionDescriptorFuse::_15msDelay => 1251u16,
                MunitionDescriptorFuse::_25msDelay => 1252u16,
                MunitionDescriptorFuse::_30msDelay => 1253u16,
                MunitionDescriptorFuse::_35msDelay => 1254u16,
                MunitionDescriptorFuse::_40msDelay => 1255u16,
                MunitionDescriptorFuse::_45msDelay => 1256u16,
                MunitionDescriptorFuse::_90msDelay => 1257u16,
                MunitionDescriptorFuse::_120msDelay => 1258u16,
                MunitionDescriptorFuse::_180msDelay => 1259u16,
                MunitionDescriptorFuse::_240msDelay => 1260u16,
                MunitionDescriptorFuse::Contact_Electronic => 1300u16,
                MunitionDescriptorFuse::Contact_Graze => 1400u16,
                MunitionDescriptorFuse::Contact_Crush => 1500u16,
                MunitionDescriptorFuse::Contact_Hydrostatic => 1600u16,
                MunitionDescriptorFuse::Contact_Mechanical => 1700u16,
                MunitionDescriptorFuse::Contact_Chemical => 1800u16,
                MunitionDescriptorFuse::Contact_Piezoelectric => 1900u16,
                MunitionDescriptorFuse::Contact_PointInitiating => 1910u16,
                MunitionDescriptorFuse::Contact_PointInitiating_BaseDetonating => 1920u16,
                MunitionDescriptorFuse::Contact_BaseDetonating => 1930u16,
                MunitionDescriptorFuse::Contact_BallisticCapandBase => 1940u16,
                MunitionDescriptorFuse::Contact_Base => 1950u16,
                MunitionDescriptorFuse::Contact_Nose => 1960u16,
                MunitionDescriptorFuse::Contact_FittedinStandoffProbe => 1970u16,
                MunitionDescriptorFuse::Contact_Nonaligned => 1980u16,
                MunitionDescriptorFuse::Timed => 2000u16,
                MunitionDescriptorFuse::Timed_Programmable => 2100u16,
                MunitionDescriptorFuse::Timed_Burnout => 2200u16,
                MunitionDescriptorFuse::Timed_Pyrotechnic => 2300u16,
                MunitionDescriptorFuse::Timed_Electronic => 2400u16,
                MunitionDescriptorFuse::Timed_BaseDelay => 2500u16,
                MunitionDescriptorFuse::Timed_ReinforcedNoseImpactDelay => 2600u16,
                MunitionDescriptorFuse::Timed_ShortDelayImpact => 2700u16,
                MunitionDescriptorFuse::_10msDelay => 2701u16,
                MunitionDescriptorFuse::_20msDelay => 2702u16,
                MunitionDescriptorFuse::_50msDelay => 2705u16,
                MunitionDescriptorFuse::_60msDelay => 2706u16,
                MunitionDescriptorFuse::_100msDelay => 2710u16,
                MunitionDescriptorFuse::_125msDelay => 2712u16,
                MunitionDescriptorFuse::_250msDelay => 2725u16,
                MunitionDescriptorFuse::Timed_NoseMountedVariableDelay => 2800u16,
                MunitionDescriptorFuse::Timed_LongDelaySide => 2900u16,
                MunitionDescriptorFuse::Timed_SelectableDelay => 2910u16,
                MunitionDescriptorFuse::Timed_Impact => 2920u16,
                MunitionDescriptorFuse::Timed_Sequence => 2930u16,
                MunitionDescriptorFuse::Proximity => 3000u16,
                MunitionDescriptorFuse::Proximity_ActiveLaser => 3100u16,
                MunitionDescriptorFuse::Proximity_Magnetic => 3200u16,
                MunitionDescriptorFuse::Proximity_ActiveRadar => 3300u16,
                MunitionDescriptorFuse::Proximity_RadioFrequency => 3400u16,
                MunitionDescriptorFuse::Proximity_Programmable => 3500u16,
                MunitionDescriptorFuse::Proximity_Programmable_Prefragmented => 3600u16,
                MunitionDescriptorFuse::Proximity_Infrared => 3700u16,
                MunitionDescriptorFuse::Command => 4000u16,
                MunitionDescriptorFuse::Command_Electronic_RemotelySet => 4100u16,
                MunitionDescriptorFuse::Altitude => 5000u16,
                MunitionDescriptorFuse::Altitude_RadioAltimeter => 5100u16,
                MunitionDescriptorFuse::Altitude_AirBurst => 5200u16,
                MunitionDescriptorFuse::Depth => 6000u16,
                MunitionDescriptorFuse::Acoustic => 7000u16,
                MunitionDescriptorFuse::Pressure => 8000u16,
                MunitionDescriptorFuse::Pressure_Delay => 8010u16,
                MunitionDescriptorFuse::Inert => 8100u16,
                MunitionDescriptorFuse::Dummy => 8110u16,
                MunitionDescriptorFuse::Practice => 8120u16,
                MunitionDescriptorFuse::PlugRepresenting => 8130u16,
                MunitionDescriptorFuse::Training => 8150u16,
                MunitionDescriptorFuse::Pyrotechnic => 9000u16,
                MunitionDescriptorFuse::Pyrotechnic_Delay => 9010u16,
                MunitionDescriptorFuse::Electrooptical => 9100u16,
                MunitionDescriptorFuse::Electromechanical => 9110u16,
                MunitionDescriptorFuse::Electromechanical_Nose => 9120u16,
                MunitionDescriptorFuse::Strikerless => 9200u16,
                MunitionDescriptorFuse::Strikerless_NoseImpact => 9210u16,
                MunitionDescriptorFuse::Strikerless_CompressionIgnition => 9220u16,
                MunitionDescriptorFuse::CompressionIgnition => 9300u16,
                MunitionDescriptorFuse::CompressionIgnition_Strikerless_NoseImpact => 9310u16,
                MunitionDescriptorFuse::Percussion => 9400u16,
                MunitionDescriptorFuse::Percussion_Instantaneous => 9410u16,
                MunitionDescriptorFuse::Electronic => 9500u16,
                MunitionDescriptorFuse::Electronic_InternallyMounted => 9510u16,
                MunitionDescriptorFuse::Electronic_RangeSetting => 9520u16,
                MunitionDescriptorFuse::Electronic_Programmed => 9530u16,
                MunitionDescriptorFuse::Mechanical => 9600u16,
                MunitionDescriptorFuse::Mechanical_Nose => 9610u16,
                MunitionDescriptorFuse::Mechanical_Tail => 9620u16
            }
        }
    }

    impl Display for MunitionDescriptorFuse {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            match self {
                MunitionDescriptorFuse::Other => write!(f, "{}", "Other"),
                MunitionDescriptorFuse::IntelligentInfluence => write!(f, "{}", "Intelligent Influence"),
                MunitionDescriptorFuse::Sensor => write!(f, "{}", "Sensor"),
                MunitionDescriptorFuse::Selfdestruct => write!(f, "{}", "Self-destruct"),
                MunitionDescriptorFuse::UltraQuick => write!(f, "{}", "Ultra Quick"),
                MunitionDescriptorFuse::Body => write!(f, "{}", "Body"),
                MunitionDescriptorFuse::DeepIntrusion => write!(f, "{}", "Deep Intrusion"),
                MunitionDescriptorFuse::Multifunction => write!(f, "{}", "Multifunction"),
                MunitionDescriptorFuse::PointDetonation => write!(f, "{}", "Point Detonation (PD)"),
                MunitionDescriptorFuse::BaseDetonation => write!(f, "{}", "Base Detonation (BD)"),
                MunitionDescriptorFuse::Contact => write!(f, "{}", "Contact"),
                MunitionDescriptorFuse::Contact_Instant => write!(f, "{}", "Contact, Instant (Impact)"),
                MunitionDescriptorFuse::Contact_Delayed => write!(f, "{}", "Contact, Delayed"),
                MunitionDescriptorFuse::_10msDelay => write!(f, "{}", "10 ms Delay"),
                MunitionDescriptorFuse::_20msDelay => write!(f, "{}", "20 ms Delay"),
                MunitionDescriptorFuse::_50msDelay => write!(f, "{}", "50 ms Delay"),
                MunitionDescriptorFuse::_60msDelay => write!(f, "{}", "60 ms Delay"),
                MunitionDescriptorFuse::_100msDelay => write!(f, "{}", "100 ms Delay"),
                MunitionDescriptorFuse::_125msDelay => write!(f, "{}", "125 ms Delay"),
                MunitionDescriptorFuse::_250msDelay => write!(f, "{}", "250 ms Delay"),
                MunitionDescriptorFuse::_5msDelay => write!(f, "{}", "5 ms Delay"),
                MunitionDescriptorFuse::_15msDelay => write!(f, "{}", "15 ms Delay"),
                MunitionDescriptorFuse::_25msDelay => write!(f, "{}", "25 ms Delay"),
                MunitionDescriptorFuse::_30msDelay => write!(f, "{}", "30 ms Delay"),
                MunitionDescriptorFuse::_35msDelay => write!(f, "{}", "35 ms Delay"),
                MunitionDescriptorFuse::_40msDelay => write!(f, "{}", "40 ms Delay"),
                MunitionDescriptorFuse::_45msDelay => write!(f, "{}", "45 ms Delay"),
                MunitionDescriptorFuse::_90msDelay => write!(f, "{}", "90 ms Delay"),
                MunitionDescriptorFuse::_120msDelay => write!(f, "{}", "120 ms Delay"),
                MunitionDescriptorFuse::_180msDelay => write!(f, "{}", "180 ms Delay"),
                MunitionDescriptorFuse::_240msDelay => write!(f, "{}", "240 ms Delay"),
                MunitionDescriptorFuse::Contact_Electronic => write!(f, "{}", "Contact, Electronic (Oblique Contact)"),
                MunitionDescriptorFuse::Contact_Graze => write!(f, "{}", "Contact, Graze"),
                MunitionDescriptorFuse::Contact_Crush => write!(f, "{}", "Contact, Crush"),
                MunitionDescriptorFuse::Contact_Hydrostatic => write!(f, "{}", "Contact, Hydrostatic"),
                MunitionDescriptorFuse::Contact_Mechanical => write!(f, "{}", "Contact, Mechanical"),
                MunitionDescriptorFuse::Contact_Chemical => write!(f, "{}", "Contact, Chemical"),
                MunitionDescriptorFuse::Contact_Piezoelectric => write!(f, "{}", "Contact, Piezoelectric"),
                MunitionDescriptorFuse::Contact_PointInitiating => write!(f, "{}", "Contact, Point Initiating"),
                MunitionDescriptorFuse::Contact_PointInitiating_BaseDetonating => write!(f, "{}", "Contact, Point Initiating, Base Detonating"),
                MunitionDescriptorFuse::Contact_BaseDetonating => write!(f, "{}", "Contact, Base Detonating"),
                MunitionDescriptorFuse::Contact_BallisticCapandBase => write!(f, "{}", "Contact, Ballistic Cap and Base"),
                MunitionDescriptorFuse::Contact_Base => write!(f, "{}", "Contact, Base"),
                MunitionDescriptorFuse::Contact_Nose => write!(f, "{}", "Contact, Nose"),
                MunitionDescriptorFuse::Contact_FittedinStandoffProbe => write!(f, "{}", "Contact, Fitted in Standoff Probe"),
                MunitionDescriptorFuse::Contact_Nonaligned => write!(f, "{}", "Contact, Non-aligned"),
                MunitionDescriptorFuse::Timed => write!(f, "{}", "Timed"),
                MunitionDescriptorFuse::Timed_Programmable => write!(f, "{}", "Timed, Programmable"),
                MunitionDescriptorFuse::Timed_Burnout => write!(f, "{}", "Timed, Burnout"),
                MunitionDescriptorFuse::Timed_Pyrotechnic => write!(f, "{}", "Timed, Pyrotechnic"),
                MunitionDescriptorFuse::Timed_Electronic => write!(f, "{}", "Timed, Electronic"),
                MunitionDescriptorFuse::Timed_BaseDelay => write!(f, "{}", "Timed, Base Delay"),
                MunitionDescriptorFuse::Timed_ReinforcedNoseImpactDelay => write!(f, "{}", "Timed, Reinforced Nose Impact Delay"),
                MunitionDescriptorFuse::Timed_ShortDelayImpact => write!(f, "{}", "Timed, Short Delay Impact"),
                MunitionDescriptorFuse::_10msDelay => write!(f, "{}", "10 ms Delay"),
                MunitionDescriptorFuse::_20msDelay => write!(f, "{}", "20 ms Delay"),
                MunitionDescriptorFuse::_50msDelay => write!(f, "{}", "50 ms Delay"),
                MunitionDescriptorFuse::_60msDelay => write!(f, "{}", "60 ms Delay"),
                MunitionDescriptorFuse::_100msDelay => write!(f, "{}", "100 ms Delay"),
                MunitionDescriptorFuse::_125msDelay => write!(f, "{}", "125 ms Delay"),
                MunitionDescriptorFuse::_250msDelay => write!(f, "{}", "250 ms Delay"),
                MunitionDescriptorFuse::Timed_NoseMountedVariableDelay => write!(f, "{}", "Timed, Nose Mounted Variable Delay"),
                MunitionDescriptorFuse::Timed_LongDelaySide => write!(f, "{}", "Timed, Long Delay Side"),
                MunitionDescriptorFuse::Timed_SelectableDelay => write!(f, "{}", "Timed, Selectable Delay"),
                MunitionDescriptorFuse::Timed_Impact => write!(f, "{}", "Timed, Impact"),
                MunitionDescriptorFuse::Timed_Sequence => write!(f, "{}", "Timed, Sequence"),
                MunitionDescriptorFuse::Proximity => write!(f, "{}", "Proximity"),
                MunitionDescriptorFuse::Proximity_ActiveLaser => write!(f, "{}", "Proximity, Active Laser"),
                MunitionDescriptorFuse::Proximity_Magnetic => write!(f, "{}", "Proximity, Magnetic (Magpolarity)"),
                MunitionDescriptorFuse::Proximity_ActiveRadar => write!(f, "{}", "Proximity, Active Radar (Doppler Radar)"),
                MunitionDescriptorFuse::Proximity_RadioFrequency => write!(f, "{}", "Proximity, Radio Frequency (RF)"),
                MunitionDescriptorFuse::Proximity_Programmable => write!(f, "{}", "Proximity, Programmable"),
                MunitionDescriptorFuse::Proximity_Programmable_Prefragmented => write!(f, "{}", "Proximity, Programmable, Prefragmented"),
                MunitionDescriptorFuse::Proximity_Infrared => write!(f, "{}", "Proximity, Infrared"),
                MunitionDescriptorFuse::Command => write!(f, "{}", "Command"),
                MunitionDescriptorFuse::Command_Electronic_RemotelySet => write!(f, "{}", "Command, Electronic, Remotely Set"),
                MunitionDescriptorFuse::Altitude => write!(f, "{}", "Altitude"),
                MunitionDescriptorFuse::Altitude_RadioAltimeter => write!(f, "{}", "Altitude, Radio Altimeter"),
                MunitionDescriptorFuse::Altitude_AirBurst => write!(f, "{}", "Altitude, Air Burst"),
                MunitionDescriptorFuse::Depth => write!(f, "{}", "Depth"),
                MunitionDescriptorFuse::Acoustic => write!(f, "{}", "Acoustic"),
                MunitionDescriptorFuse::Pressure => write!(f, "{}", "Pressure"),
                MunitionDescriptorFuse::Pressure_Delay => write!(f, "{}", "Pressure, Delay"),
                MunitionDescriptorFuse::Inert => write!(f, "{}", "Inert"),
                MunitionDescriptorFuse::Dummy => write!(f, "{}", "Dummy"),
                MunitionDescriptorFuse::Practice => write!(f, "{}", "Practice"),
                MunitionDescriptorFuse::PlugRepresenting => write!(f, "{}", "Plug Representing"),
                MunitionDescriptorFuse::Training => write!(f, "{}", "Training"),
                MunitionDescriptorFuse::Pyrotechnic => write!(f, "{}", "Pyrotechnic"),
                MunitionDescriptorFuse::Pyrotechnic_Delay => write!(f, "{}", "Pyrotechnic, Delay"),
                MunitionDescriptorFuse::Electrooptical => write!(f, "{}", "Electro-optical"),
                MunitionDescriptorFuse::Electromechanical => write!(f, "{}", "Electromechanical"),
                MunitionDescriptorFuse::Electromechanical_Nose => write!(f, "{}", "Electromechanical, Nose"),
                MunitionDescriptorFuse::Strikerless => write!(f, "{}", "Strikerless"),
                MunitionDescriptorFuse::Strikerless_NoseImpact => write!(f, "{}", "Strikerless, Nose Impact"),
                MunitionDescriptorFuse::Strikerless_CompressionIgnition => write!(f, "{}", "Strikerless, Compression-Ignition"),
                MunitionDescriptorFuse::CompressionIgnition => write!(f, "{}", "Compression-Ignition"),
                MunitionDescriptorFuse::CompressionIgnition_Strikerless_NoseImpact => write!(f, "{}", "Compression-Ignition, Strikerless, Nose Impact"),
                MunitionDescriptorFuse::Percussion => write!(f, "{}", "Percussion"),
                MunitionDescriptorFuse::Percussion_Instantaneous => write!(f, "{}", "Percussion, Instantaneous"),
                MunitionDescriptorFuse::Electronic => write!(f, "{}", "Electronic"),
                MunitionDescriptorFuse::Electronic_InternallyMounted => write!(f, "{}", "Electronic, Internally Mounted"),
                MunitionDescriptorFuse::Electronic_RangeSetting => write!(f, "{}", "Electronic, Range Setting"),
                MunitionDescriptorFuse::Electronic_Programmed => write!(f, "{}", "Electronic, Programmed"),
                MunitionDescriptorFuse::Mechanical => write!(f, "{}", "Mechanical"),
                MunitionDescriptorFuse::Mechanical_Nose => write!(f, "{}", "Mechanical, Nose"),
                MunitionDescriptorFuse::Mechanical_Tail => write!(f, "{}", "Mechanical, Tail")
            }
        }
    }

    impl Default for MunitionDescriptorFuse { fn default() -> Self { MunitionDescriptorFuse::from(0) } }
}