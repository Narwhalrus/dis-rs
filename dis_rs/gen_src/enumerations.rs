pub mod enumerations { # [derive (Copy , Clone , Debug , PartialEq)] pub enum ForceID { Other = 0 , Friendly = 1 , Opposing = 2 , Neutral = 3 , Friendly2 = 4 , Opposing2 = 5 , Neutral2 = 6 , Friendly3 = 7 , Opposing3 = 8 , Neutral3 = 9 , Friendly4 = 10 , Opposing4 = 11 , Neutral4 = 12 , Friendly5 = 13 , Opposing5 = 14 , Neutral5 = 15 , Friendly6 = 16 , Opposing6 = 17 , Neutral6 = 18 , Friendly7 = 19 , Opposing7 = 20 , Neutral7 = 21 , Friendly8 = 22 , Opposing8 = 23 , Neutral8 = 24 , Friendly9 = 25 , Opposing9 = 26 , Neutral9 = 27 , Friendly10 = 28 , Opposing10 = 29 , Neutral10 = 30 } impl From < u8 > for ForceID { fn from (value : u8) -> Self { match value { 0u8 => ForceID :: Other , 1u8 => ForceID :: Friendly , 2u8 => ForceID :: Opposing , 3u8 => ForceID :: Neutral , 4u8 => ForceID :: Friendly2 , 5u8 => ForceID :: Opposing2 , 6u8 => ForceID :: Neutral2 , 7u8 => ForceID :: Friendly3 , 8u8 => ForceID :: Opposing3 , 9u8 => ForceID :: Neutral3 , 10u8 => ForceID :: Friendly4 , 11u8 => ForceID :: Opposing4 , 12u8 => ForceID :: Neutral4 , 13u8 => ForceID :: Friendly5 , 14u8 => ForceID :: Opposing5 , 15u8 => ForceID :: Neutral5 , 16u8 => ForceID :: Friendly6 , 17u8 => ForceID :: Opposing6 , 18u8 => ForceID :: Neutral6 , 19u8 => ForceID :: Friendly7 , 20u8 => ForceID :: Opposing7 , 21u8 => ForceID :: Neutral7 , 22u8 => ForceID :: Friendly8 , 23u8 => ForceID :: Opposing8 , 24u8 => ForceID :: Neutral8 , 25u8 => ForceID :: Friendly9 , 26u8 => ForceID :: Opposing9 , 27u8 => ForceID :: Neutral9 , 28u8 => ForceID :: Friendly10 , 29u8 => ForceID :: Opposing10 , 30u8 => ForceID :: Neutral10 , _unspecified_value => ForceID :: default () } } } impl From < ForceID > for u8 { fn from (value : ForceID) -> Self { match value { ForceID :: Other => 0u8 , ForceID :: Friendly => 1u8 , ForceID :: Opposing => 2u8 , ForceID :: Neutral => 3u8 , ForceID :: Friendly2 => 4u8 , ForceID :: Opposing2 => 5u8 , ForceID :: Neutral2 => 6u8 , ForceID :: Friendly3 => 7u8 , ForceID :: Opposing3 => 8u8 , ForceID :: Neutral3 => 9u8 , ForceID :: Friendly4 => 10u8 , ForceID :: Opposing4 => 11u8 , ForceID :: Neutral4 => 12u8 , ForceID :: Friendly5 => 13u8 , ForceID :: Opposing5 => 14u8 , ForceID :: Neutral5 => 15u8 , ForceID :: Friendly6 => 16u8 , ForceID :: Opposing6 => 17u8 , ForceID :: Neutral6 => 18u8 , ForceID :: Friendly7 => 19u8 , ForceID :: Opposing7 => 20u8 , ForceID :: Neutral7 => 21u8 , ForceID :: Friendly8 => 22u8 , ForceID :: Opposing8 => 23u8 , ForceID :: Neutral8 => 24u8 , ForceID :: Friendly9 => 25u8 , ForceID :: Opposing9 => 26u8 , ForceID :: Neutral9 => 27u8 , ForceID :: Friendly10 => 28u8 , ForceID :: Opposing10 => 29u8 , ForceID :: Neutral10 => 30u8 } } } impl Default for ForceID { fn default () -> Self { ForceID :: from (0) } } # [derive (Copy , Clone , Debug , PartialEq)] pub enum EntityKind { Other = 0 , Platform = 1 , Munition = 2 , Lifeform = 3 , Environmental = 4 , Culturalfeature = 5 , Supply = 6 , Radio = 7 , Expendable = 8 , SensorEmitter = 9 } impl From < u8 > for EntityKind { fn from (value : u8) -> Self { match value { 0u8 => EntityKind :: Other , 1u8 => EntityKind :: Platform , 2u8 => EntityKind :: Munition , 3u8 => EntityKind :: Lifeform , 4u8 => EntityKind :: Environmental , 5u8 => EntityKind :: Culturalfeature , 6u8 => EntityKind :: Supply , 7u8 => EntityKind :: Radio , 8u8 => EntityKind :: Expendable , 9u8 => EntityKind :: SensorEmitter , _unspecified_value => EntityKind :: default () } } } impl From < EntityKind > for u8 { fn from (value : EntityKind) -> Self { match value { EntityKind :: Other => 0u8 , EntityKind :: Platform => 1u8 , EntityKind :: Munition => 2u8 , EntityKind :: Lifeform => 3u8 , EntityKind :: Environmental => 4u8 , EntityKind :: Culturalfeature => 5u8 , EntityKind :: Supply => 6u8 , EntityKind :: Radio => 7u8 , EntityKind :: Expendable => 8u8 , EntityKind :: SensorEmitter => 9u8 } } } impl Default for EntityKind { fn default () -> Self { EntityKind :: from (0) } } # [derive (Copy , Clone , Debug , PartialEq)] pub enum EntityMarkingCharacterSet { Unused = 0 , ASCII = 1 , U_S_ArmyMarking = 2 , DigitChevron = 3 } impl From < u8 > for EntityMarkingCharacterSet { fn from (value : u8) -> Self { match value { 0u8 => EntityMarkingCharacterSet :: Unused , 1u8 => EntityMarkingCharacterSet :: ASCII , 2u8 => EntityMarkingCharacterSet :: U_S_ArmyMarking , 3u8 => EntityMarkingCharacterSet :: DigitChevron , _unspecified_value => EntityMarkingCharacterSet :: default () } } } impl From < EntityMarkingCharacterSet > for u8 { fn from (value : EntityMarkingCharacterSet) -> Self { match value { EntityMarkingCharacterSet :: Unused => 0u8 , EntityMarkingCharacterSet :: ASCII => 1u8 , EntityMarkingCharacterSet :: U_S_ArmyMarking => 2u8 , EntityMarkingCharacterSet :: DigitChevron => 3u8 } } } impl Default for EntityMarkingCharacterSet { fn default () -> Self { EntityMarkingCharacterSet :: from (0) } } }